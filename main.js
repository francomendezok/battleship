(()=>{var e={776:e=>{class t{constructor(e){this.size=e,this.hit=0,this.sunk=!1,this.coordinates=[]}registerHit(){return this.hit+=1}isSunk(){return this.hit===this.size}addCoordinates(e){this.coordinates.push(e)}}class a{constructor(){this.board=[],this.ships=[]}createBoard(e=8){for(let t=0;t<e;t+=1)for(let a=0;a<e;a+=1){const e=`${t},${a}`;this.board[e]={attacked:!1,missed:!1,hasShip:!1,ship:[]}}return this.board}isValid(e){let t=e.split(","),a=Number(t[0]),d=Number(t[1]);return a>=0&&a<=7&&d>=0&&d<=7}getBoard(){return this.board}addShip(e){this.ships.push(e)}placeShip(e,a){if(e!==a.length)return"Size and coordinates length should be equal";const d=new t(e);for(let e=0;e<a.length;e++)if(this.isValid(a[e]))this.board[a[e]].ship.push(a),this.board[a[e]].hasShip=!0;else if(!this.isValid(a[e]))return"No Valid";return d.addCoordinates(a),this.addShip(d),this.board}isMoveLegal(e){return!this.board[e].attacked&&!this.board[e].missed}placeEnemyShips(e){this.createCoordinates(5),this.createCoordinates(4),this.createCoordinates(3),this.createCoordinates(3),this.createCoordinates(2)}createCoordinates(e){let t=Math.floor(8*Math.random()),a=Math.floor(8*Math.random()),d=`${t},${a}`,i=[];if(this.isMoveLegal(d))i.push(d);else for(;!this.isMoveLegal(d);)t=Math.floor(8*Math.random()),a=Math.floor(8*Math.random()),d=`${t},${a}`;let n=d.split(",");i.push(d);for(let t=0;t<e-1;t++)n[Math.floor(2*Math.random())];return i}getAdjacents(e,t){let a=[],d=t.split(",");for(let t=0;t<4;t++)for(let t=0;t<e;t++){let[e,t]=d,i=`${e}, ${t++}`,n=`${e}, ${t--}`,s=`${e++}, ${t}`,o=`${e--}, ${t}`;a.push(i,n,s,o)}}receiveAttack(e){let t=`${e}`;if(!this.board[t].attacked&&!this.board[t].missed)return this.board[t].hasShip?(this.board[t].attacked=!0,this.ships.forEach((e=>{e.coordinates[0].includes(t)&&(e.registerHit(),e.isSunk()&&(e.sunk=!0))}))):this.board[t].missed=!0,!0}getShips(){return this.ships}allSunk(){return this.ships.every((e=>!0===e.sunk))}}let d=new a;d.createBoard(),d.placeShip(3,["7,1","7,2","7,3"]),d.placeShip(3,["0,1","0,2","0,3"]),d.receiveAttack("0,1"),d.receiveAttack("0,2"),d.receiveAttack("0,3"),d.receiveAttack("7,1"),d.receiveAttack("7,2"),d.receiveAttack("7,3");class i{constructor(e){this.gameboard=e}isMoveLegal(e){return!this.gameboard.board[e].attacked&&!this.gameboard.board[e].missed}makeRandomMove(){let e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;if(this.isMoveLegal(a))return a;for(;!this.isMoveLegal(a);)e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;return a}}new i(d),e.exports={Ship:t,Gameboard:a,Player:i}}},t={};function a(d){var i=t[d];if(void 0!==i)return i.exports;var n=t[d]={exports:{}};return e[d](n,n.exports,a),n.exports}(()=>{"use strict";var e=a(776);function t(){const a=document.getElementById("main"),s=document.createElement("div"),o=document.createElement("h3"),r=document.createElement("input"),c=document.createElement("button");s.classList.add("pop-up-box"),o.classList.add("title-pop-up"),r.classList.add("input-pop-up"),c.classList.add("play-button"),o.textContent="Write your Name",c.innerHTML="Battle",r.type="text",c.type="submit",s.appendChild(o),s.appendChild(r),s.appendChild(c),a.appendChild(s),c.addEventListener("click",(()=>{n(),function(a){!function(e){const t=document.getElementById("main"),a=document.createElement("div"),d=document.createElement("div"),i=document.createElement("div"),n=document.createElement("div"),s=document.createElement("h3"),o=document.createElement("div"),r=document.createElement("div"),c=document.createElement("div"),l=document.createElement("div"),m=document.createElement("div"),h=document.createElement("h3"),p=document.createElement("img"),u=document.createElement("img"),b=document.createElement("img"),g=document.createElement("img"),v=document.createElement("img");p.src="../dist/Images/5.png",u.src="../dist/Images/5.png",b.src="../dist/Images/5.png",g.src="../dist/Images/5.png",v.src="../dist/Images/5.png",[p,u,b,g,v].forEach((e=>{e.classList.add("ship"),o.appendChild(e)})),a.classList.add("my-section"),d.classList.add("my-game-section"),i.classList.add("my-board"),n.classList.add("my-name-box"),s.classList.add("my-name"),o.classList.add("my-ships"),r.classList.add("enemy-section"),c.classList.add("enemy-game-section"),l.classList.add("enemy-board"),m.classList.add("enemy-name-box"),h.classList.add("enemy-name");for(let e=0;e<8;e+=1)for(let t=0;t<8;t+=1){const a=`${e},${t}`,d=document.createElement("div"),n=document.createElement("div");d.classList.add("my-div-box"),n.classList.add("enemy-div-box"),d.id=`P ${a}`,n.id=`E ${a}`,i.appendChild(d),l.appendChild(n)}s.textContent=e,h.textContent="Enemy",n.appendChild(s),d.appendChild(i),a.appendChild(n),a.appendChild(d),m.appendChild(h),c.appendChild(l),r.appendChild(m),r.appendChild(c),t.appendChild(a),t.appendChild(o),t.appendChild(r),t.classList.add("main-game")}(a);let s=new e.Gameboard,o=new e.Gameboard;s.createBoard(),s.placeShip(2,["5,1","5,2"]),o.createBoard(),o.placeShip(5,["1,1","1,2","1,3","1,4","1,5"]),o.placeShip(4,["4,4","4,5","4,6","4,7"]);let r=new e.Player(s),c=new e.Player(o);d(r.gameboard),i(c.gameboard),[...document.querySelectorAll(".enemy-div-box")].forEach((e=>{e.addEventListener("click",(e=>{let a=e.target.id.split(" ")[1],l=c.makeRandomMove(),m=s.receiveAttack(l);if(o.receiveAttack(a)){i(c.gameboard),setTimeout((function(){for(;!m;)l=c.makeRandomMove(),m=s.receiveAttack(l);d(r.gameboard)}),1e3);let e=s.allSunk(),a=o.allSunk();e&&(n(),function(){const e=document.getElementById("main"),a=document.createElement("div"),d=document.createElement("h3"),i=document.createElement("button");a.classList.add("pop-up-box"),d.classList.add("title-pop-up"),i.classList.add("play-button"),d.textContent="You Lose",i.innerHTML="Play Again",i.type="submit",a.appendChild(d),a.appendChild(i),e.appendChild(a),i.addEventListener("click",(()=>{n(),t()}))}()),a&&(n(),function(){const e=document.getElementById("main"),a=document.createElement("div"),d=document.createElement("h3"),i=document.createElement("button");a.classList.add("pop-up-box"),d.classList.add("title-pop-up"),i.classList.add("play-button"),d.textContent="You Win",i.innerHTML="Play Again",i.type="submit",a.appendChild(d),a.appendChild(i),e.appendChild(a),i.addEventListener("click",(()=>{n(),t()}))}())}}))}))}(r.value)}))}function d(e){const t=document.querySelectorAll(".my-div-box");for(const a of t){let t=a.id.split(" ")[1];e.board[t].hasShip&&(a.style.background="green"),e.board[t].attacked&&(a.innerHTML="‚ùå",a.style.background="#F5C2C1"),e.board[t].missed&&(a.innerHTML="üí¶",a.style.background="lightblue")}}function i(e){const t=document.querySelectorAll(".enemy-div-box");for(const a of t){let t=a.id.split(" ")[1];e.board[t].hasShip&&(a.style.background="orange"),e.board[t].attacked&&(a.innerHTML="‚ùå",a.style.background="#F5C2C1"),e.board[t].missed&&(a.innerHTML="üí¶",a.style.background="lightblue")}}function n(){document.getElementById("main").innerHTML=""}t()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,