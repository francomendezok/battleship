(()=>{var t={776:t=>{class e{constructor(t){this.size=t,this.hit=0,this.sunk=!1,this.coordinates=[]}registerHit(){return this.hit+=1}isSunk(){return this.hit===this.size}addCoordinates(t){this.coordinates.push(t)}}class i{constructor(){this.board=[],this.ships=[]}createBoard(t=8){for(let e=0;e<t;e+=1)for(let i=0;i<t;i+=1){const t=`${e},${i}`;this.board[t]={attacked:!1,missed:!1,hasShip:!1,ship:[]}}return this.board}isValid(t){let e=t.split(","),i=Number(e[0]),s=Number(e[1]);return i>=0&&i<=7&&s>=0&&s<=7}getBoard(){return this.board}addShip(t){this.ships.push(t)}placeShip(t,i){if(t!==i.length)return"Size and coordinates length should be equal";const s=new e(t);for(let t=0;t<i.length;t++)if(this.isValid(i[t]))this.board[i[t]].ship.push(i),this.board[i[t]].hasShip=!0;else if(!this.isValid(i[t]))return"No Valid";return s.addCoordinates(i),this.addShip(s),this.board}receiveAttack(t){let e=`${t}`;this.board[e].hasShip?(this.board[e].attacked=!0,this.ships.forEach((t=>{t.coordinates[0].includes(e)&&(t.registerHit(),t.isSunk()&&(t.sunk=!0))}))):this.board[e].missed=!0}getShips(){return this.ships}allSunk(){return this.ships.every((t=>!0===t.sunk))}}let s=new i;s.createBoard(),s.placeShip(3,["7,1","7,2","7,3"]),s.placeShip(3,["0,1","0,2","0,3"]),s.receiveAttack("0,1"),s.receiveAttack("0,2"),s.receiveAttack("0,3"),s.receiveAttack("7,1"),s.receiveAttack("7,2"),s.receiveAttack("7,3");class r{constructor(t){this.gameboard=t}isMoveLegal(t){return!this.gameboard.board[t].attacked&&!this.gameboard.board[t].missed}makeRandomMove(){let t=Math.floor(8*Math.random()),e=Math.floor(8*Math.random()),i=`${t},${e}`;if(this.isMoveLegal(i))return i;for(;!this.isMoveLegal(i);)t=Math.floor(8*Math.random()),e=Math.floor(8*Math.random()),i=`${t},${e}`;return i}}new r(s),t.exports={Ship:e,Gameboard:i,Player:r}}},e={};function i(s){var r=e[s];if(void 0!==r)return r.exports;var a=e[s]={exports:{}};return t[s](a,a.exports,i),a.exports}(()=>{"use strict";function t(){document.getElementById("main").innerHTML=""}i(776),function(){const e=document.getElementById("main"),i=document.createElement("div"),s=document.createElement("h3"),r=document.createElement("input"),a=document.createElement("button");i.classList.add("pop-up-box"),s.classList.add("title-pop-up"),r.classList.add("input-pop-up"),a.classList.add("play-button"),s.textContent="Write your Name",a.innerHTML="Battle",r.type="text",a.type="submit",i.appendChild(s),i.appendChild(r),i.appendChild(a),e.appendChild(i),a.addEventListener("click",t)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,