(()=>{var e={776:e=>{class t{constructor(e){this.size=e,this.hit=0,this.sunk=!1,this.coordinates=[]}registerHit(){return this.hit+=1}isSunk(){return this.hit===this.size}addCoordinates(e){this.coordinates.push(e)}}e.exports={Ship:t,Gameboard:class{constructor(){this.board=[],this.ships=[]}createBoard(e=8){for(let t=0;t<e;t+=1)for(let n=0;n<e;n+=1){const e=`${t},${n}`;this.board[e]={coordinates:e,attacked:!1,missed:!1,hasShip:!1,ship:[]}}return this.board}isValid(e){let t=e.split(","),n=Number(t[0]),a=Number(t[1]);return n>=0&&n<=7&&a>=0&&a<=7}getBoard(){return this.board}addShip(e){this.ships.push(e)}placeShip(e,n){if(e!==n.length)return!1;const a=new t(e);for(let e=0;e<n.length;e++){if(this.hasShip(n[e]))return!1;this.board[n[e]].ship.push(n),this.board[n[e]].hasShip=!0}return a.addCoordinates(n),this.addShip(a),!0}isMoveLegal(e){return!this.board[e].attacked&&!this.board[e].missed}hasShip(e){return this.board[e].hasShip}placeEnemyShips(e){let t=this.createCoordinates(),n=this.createCoordinates(),a=this.createCoordinates(),d=this.createCoordinates(),s=this.createCoordinates(),o=[e.getAdjacents(e,5,t),e.getAdjacents(e,4,n),e.getAdjacents(e,3,a),e.getAdjacents(e,3,d),e.getAdjacents(e,2,s)],i=[5,4,3,3,2];for(let t=0;t<o.length;t++){let n=o[t].filter((e=>e.length===i[t]));if(n.length){let a=this.placeShip(i[t],n[1]||n[0]);for(;!a;){let n=this.createCoordinates(),d=e.getAdjacents(e,i[t],n),s=d.filter((e=>e.length===i[t]));for(;!s.length;)n=this.createCoordinates(),d=e.getAdjacents(e,i[t],n),s=d.filter((e=>e.length===i[t]));a=this.placeShip(i[t],s[1]||s[0])}}else{for(;!n.length;){let a=this.createCoordinates();n=e.getAdjacents(e,i[t],a).filter((e=>e.length===i[t]))}let a=this.placeShip(i[t],n[1]||n[0]);for(;!a;){let n=this.createCoordinates(),d=e.getAdjacents(e,i[t],n),s=d.filter((e=>e.length===i[t]));for(;!s.length;)n=this.createCoordinates(),d=e.getAdjacents(e,i[t],n),s=d.filter((e=>e.length===i[t]));a=this.placeShip(i[t],s[1]||s[0])}}}}createCoordinates(){let e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),n=`${e},${t}`;if(this.hasShip(n)){for(;this.hasShip(n);)e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),n=`${e},${t}`;return n}return n}getAdjacents(e,t,n){let a=e.boardArray(),d=[[],[]],s=1,o=8,i=0;for(let e=0;e<a.length;e++)if(a[e].coordinates===n){i=e;break}for(let e=0;e<t;e++){if(a[i+s]){let e=n.split(","),t=a[i+s].coordinates,o=t.split(",");t&&o[0]===e[0]&&(d[0].push(a[i+s].coordinates),s++)}if(a[i+o]){let e=n.split(","),t=a[i+o].coordinates;t.split(","),t&&t.includes(e[1])&&(d[1].push(a[i+o].coordinates),o+=8)}}return d}hasAllShipsPlaced(){return 5===this.ships.length}receiveAttack(e){let t=`${e}`;if(!this.board[t].attacked&&!this.board[t].missed)return this.board[t].hasShip?(this.board[t].attacked=!0,this.ships.forEach((e=>{e.coordinates[0].includes(t)&&(e.registerHit(),e.isSunk()&&(e.sunk=!0))}))):this.board[t].missed=!0,!0}getShips(){return this.ships}allSunk(){return this.ships.every((e=>!0===e.sunk))}boardArray(){const e=this.board,t=[];for(let n in e)t.push(e[n]);return t}},Player:class{constructor(e){this.gameboard=e}isMoveLegal(e){return!this.gameboard.board[e].attacked&&!this.gameboard.board[e].missed}makeRandomMove(){let e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),n=`${e},${t}`;if(this.isMoveLegal(n))return n;for(;!this.isMoveLegal(n);)e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),n=`${e},${t}`;return n}}}}},t={};function n(a){var d=t[a];if(void 0!==d)return d.exports;var s=t[a]={exports:{}};return e[a](s,s.exports,n),s.exports}(()=>{"use strict";var e=n(776);function t(){const t=document.getElementById("main"),n=document.createElement("div"),s=document.createElement("h3"),i=document.createElement("input"),l=document.createElement("button");n.classList.add("pop-up-box"),s.classList.add("title-pop-up"),i.classList.add("input-pop-up"),l.classList.add("play-button"),s.textContent="Write your Name",l.innerHTML="Battle",i.type="text",l.type="submit",n.appendChild(s),n.appendChild(i),n.appendChild(l),t.appendChild(n),l.addEventListener("click",(()=>{i.value?(o(),function(t){const n=document.getElementById("main"),s=document.createElement("div"),i=document.createElement("div"),l=document.createElement("div"),r=document.createElement("div"),c=document.createElement("h3"),h=document.createElement("button"),u=["Carrier","Battleship","Cruiser","Submarine","Destroyer"];let m=[4,3,2,2,1];n.classList.add("main-game"),s.classList.add("my-section"),i.classList.add("my-game-section"),l.classList.add("my-board"),r.classList.add("my-name-box"),c.classList.add("my-name"),h.classList.add("axis");let p=0;c.innerHTML=`${t},  place your  ${u[p]}`,c.dataset.size=p,h.innerHTML="Axis X",h.addEventListener("click",(()=>{"Axis X"===h.innerHTML?h.innerHTML="Axis Y":h.innerHTML="Axis X"}));let g=new e.Gameboard;g.createBoard(),new e.Player(g);for(let e=0;e<8;e+=1)for(let t=0;t<8;t+=1){const n=`${e},${t}`,s=document.createElement("div");s.classList.add("my-div-box"),s.id=`${n}`,7===t&&(s.dataset.xNotAllowed=!0),7===e&&(s.dataset.yNotAllowed=!0),s.addEventListener("mouseover",(()=>{let e=document.querySelector(".my-name").textContent.split(" "),t=e[e.length-1],n=u.indexOf(t),a=m[n],d=document.querySelector(".axis").textContent.split(" ")[1],o=g.getAdjacents(g,a,s.id);if("X"===d){let e=o[0].some((e=>g.hasShip(e)));g.hasShip(s.id)||e||o[0].length<a?(g.hasShip(s.id)||(s.style.background="red"),s.style.cursor="not-allowed"):o[0].forEach((e=>{g.hasShip(e)?(s.style.cursor="not-allowed",document.getElementById(e).style.background="green"):(document.getElementById(e).style.background="black",s.style.background="black",s.style.cursor="crosshair")}))}if("Y"===d){let e=o[1].some((e=>g.hasShip(e)));g.hasShip(s.id)||e||o[1].length<a?(g.hasShip(s.id)||(s.style.background="red"),s.style.cursor="not-allowed"):o[1].forEach((e=>{g.hasShip(e)?(s.style.cursor="not-allowed",document.getElementById(e).style.background="green"):(document.getElementById(e).style.background="black",s.style.background="black",s.style.cursor="crosshair")}))}})),s.addEventListener("mouseleave",(()=>{let e=document.querySelector(".my-name").textContent.split(" "),t=e[e.length-1],n=u.indexOf(t),a=m[n],d=document.querySelector(".axis").textContent.split(" ")[1],o=g.getAdjacents(g,a,s.id);"X"===d&&(s.dataset.xNotAllowed&&(s.style.background="lightgoldenrodyellow",s.style.cursor="crosshair"),g.hasShip(s.id)?(s.style.background="green",s.style.cursor="not-allowed"):o[0].forEach((e=>{g.hasShip(e)?(s.style.cursor="not-allowed",s.style.background="lightgoldenrodyellow",document.getElementById(e).style.background="green"):(document.getElementById(e).style.background="lightgoldenrodyellow",s.style.background="lightgoldenrodyellow")}))),"Y"===d&&(s.dataset.yNotAllowed&&(s.style.background="lightgoldenrodyellow",s.style.cursor="crosshair"),g.hasShip(s.id)?(s.style.background="green",s.style.cursor="not-allowed"):o[1].forEach((e=>{g.hasShip(e)?(s.style.cursor="not-allowed",s.style.background="lightgoldenrodyellow",document.getElementById(e).style.background="green"):(document.getElementById(e).style.background="lightgoldenrodyellow",s.style.background="lightgoldenrodyellow")})))})),s.addEventListener("click",(()=>{let e=document.querySelector(".my-name").textContent.split(" "),t=e[e.length-1],n=e[0].split(",")[0],i=u.indexOf(t),l=m[i],r=document.querySelector(".axis").textContent.split(" ")[1],h=g.getAdjacents(g,l,s.id);"X"===r&&(l+=1,h[0].unshift(s.id),g.placeShip(l,h[0])&&(d(g),p+=1,p===u.length&&(o(),a(n,g)),c.innerHTML=`${n},  place your ${u[p]}`)),"Y"===r&&(l+=1,h[1].unshift(s.id),g.placeShip(l,h[1])&&(d(g),p+=1,p===u.length&&(o(),a(n,g)),c.innerHTML=`${n},  place your ${u[p]}`))})),l.appendChild(s)}r.appendChild(c),r.appendChild(h),i.appendChild(l),s.appendChild(r),s.appendChild(i),n.appendChild(s),d(g)}(i.value)):alert("Please Write Your Name")}))}function a(n,a){const i=document.getElementById("main"),l=document.createElement("div"),r=document.createElement("div"),c=document.createElement("div"),h=document.createElement("div"),u=document.createElement("h3"),m=document.createElement("div"),p=document.createElement("div"),g=document.createElement("div"),y=document.createElement("div"),b=document.createElement("h3");l.classList.add("my-section"),r.classList.add("my-game-section"),c.classList.add("my-board"),h.classList.add("my-name-box"),u.classList.add("my-name"),m.classList.add("enemy-section"),p.classList.add("enemy-game-section"),g.classList.add("enemy-board"),y.classList.add("enemy-name-box"),b.classList.add("enemy-name");for(let e=0;e<8;e+=1)for(let t=0;t<8;t+=1){const n=`${e},${t}`,a=document.createElement("div"),d=document.createElement("div");a.classList.add("my-div-box"),d.classList.add("enemy-div-box"),a.id=`${n}`,d.id=`E ${n}`,c.appendChild(a),g.appendChild(d)}u.innerHTML=n,b.innerHTML="Enemy",h.appendChild(u),r.appendChild(c),l.appendChild(h),l.appendChild(r),y.appendChild(b),p.appendChild(g),m.appendChild(y),m.appendChild(p),i.appendChild(l),i.appendChild(m),i.classList.add("main-game"),d(a),function(n){let a=new e.Gameboard,i=n,l=new e.Player(i);a.createBoard();let r=new e.Player(a);a.placeEnemyShips(a),d(n),s(a),[...document.querySelectorAll(".enemy-div-box")].forEach((e=>{e.addEventListener("click",(e=>{let n=e.target.id.split(" ")[1],c=r.makeRandomMove(),h=i.receiveAttack(c);if(a.receiveAttack(n)){s(r.gameboard),setTimeout((function(){for(;!h;)c=r.makeRandomMove(),h=i.receiveAttack(c);d(l.gameboard)}),1e3);let e=i.allSunk(),n=a.allSunk();e&&(o(),function(){const e=document.getElementById("main"),n=document.createElement("div"),a=document.createElement("h3"),d=document.createElement("button");n.classList.add("pop-up-box"),a.classList.add("title-pop-up"),d.classList.add("play-button"),a.textContent="You Lose",d.innerHTML="Play Again",d.type="submit",n.appendChild(a),n.appendChild(d),e.appendChild(n),d.addEventListener("click",(()=>{o(),t()}))}()),n&&(o(),function(){const e=document.getElementById("main"),n=document.createElement("div"),a=document.createElement("h3"),d=document.createElement("button");n.classList.add("pop-up-box"),a.classList.add("title-pop-up"),d.classList.add("play-button"),a.textContent="You Win",d.innerHTML="Play Again",d.type="submit",n.appendChild(a),n.appendChild(d),e.appendChild(n),d.addEventListener("click",(()=>{o(),t()}))}())}}))}))}(a)}function d(e){let t=e.boardArray();for(let e=0;e<t.length;e++){if(t[e].hasShip&&(document.getElementById(t[e].coordinates).style.background="green"),t[e].attacked){let n=document.getElementById(t[e].coordinates);n.innerHTML="❌",n.style.background="#F5C2C1"}if(t[e].missed){let n=document.getElementById(t[e].coordinates);n.innerHTML="💦",n.style.background="lightblue"}t[e].hasShip||t[e].attacked||t[e].missed||(document.getElementById(t[e].coordinates).style.background="lightgoldenrodyellow")}}function s(e){const t=document.querySelectorAll(".enemy-div-box");for(const n of t){let t=n.id.split(" ")[1];e.board[t].attacked&&(n.innerHTML="❌",n.style.background="#F5C2C1"),e.board[t].missed&&(n.innerHTML="💦",n.style.background="lightblue")}}function o(){document.getElementById("main").innerHTML=""}t()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,