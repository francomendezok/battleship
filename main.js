(()=>{var e={776:e=>{class t{constructor(e){this.size=e,this.hit=0,this.sunk=!1,this.coordinates=[]}registerHit(){return this.hit+=1}isSunk(){return this.hit===this.size}addCoordinates(e){this.coordinates.push(e)}}e.exports={Ship:t,Gameboard:class{constructor(){this.board=[],this.ships=[]}createBoard(e=8){for(let t=0;t<e;t+=1)for(let a=0;a<e;a+=1){const e=`${t},${a}`;this.board[e]={coordinates:e,attacked:!1,missed:!1,hasShip:!1,ship:[]}}return this.board}isValid(e){let t=e.split(","),a=Number(t[0]),d=Number(t[1]);return a>=0&&a<=7&&d>=0&&d<=7}getBoard(){return this.board}addShip(e){this.ships.push(e)}placeShip(e,a){if(e!==a.length)return"Size and coordinates length should be equal";const d=new t(e);for(let e=0;e<a.length;e++){if(this.hasShip(a[e]))return!1;this.board[a[e]].ship.push(a),this.board[a[e]].hasShip=!0}return d.addCoordinates(a),this.addShip(d),!0}isMoveLegal(e){return!this.board[e].attacked&&!this.board[e].missed}hasShip(e){return this.board[e].hasShip}placeEnemyShips(){let e=this.createCoordinates(),t=this.createCoordinates(),a=this.createCoordinates(),d=this.createCoordinates(),s=this.createCoordinates(),n=this.boardArray(),o=[this.getAdjacents(n,5,e),this.getAdjacents(n,4,t),this.getAdjacents(n,3,a),this.getAdjacents(n,3,d),this.getAdjacents(n,2,s)],r=[5,4,3,3,2],i=[];for(let e=0;e<o.length;e++){let t=o[e].filter((t=>t.length===r[e]));i.push(t)}i.forEach((e=>{this.placeShip(e[0].length,e[0])}))}createCoordinates(){let e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;if(this.hasShip(a)){for(;this.hasShip(a);)e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;return a}return a}getAdjacents(e,t,a){let d=e.boardArray(),s=[[],[]],n=1,o=8,r=0;for(let e=0;e<d.length;e++)if(d[e].coordinates===a){r=e;break}for(let e=0;e<t;e++){if(d[r+n]){let e=a.split(","),t=d[r+n].coordinates,o=t.split(",");t&&o[0]===e[0]&&(s[0].push(d[r+n].coordinates),n++)}if(d[r+o]){let e=a.split(","),t=d[r+o].coordinates;t.split(","),t&&t.includes(e[1])&&(s[1].push(d[r+o].coordinates),o+=8)}}return s}hasAllShipsPlaced(){return 5===this.ships.length}receiveAttack(e){let t=`${e}`;if(!this.board[t].attacked&&!this.board[t].missed)return this.board[t].hasShip?(this.board[t].attacked=!0,this.ships.forEach((e=>{e.coordinates[0].includes(t)&&(e.registerHit(),e.isSunk()&&(e.sunk=!0))}))):this.board[t].missed=!0,!0}getShips(){return this.ships}allSunk(){return this.ships.every((e=>!0===e.sunk))}boardArray(){const e=this.board,t=[];for(let a in e)t.push(e[a]);return t}},Player:class{constructor(e){this.gameboard=e}isMoveLegal(e){return!this.gameboard.board[e].attacked&&!this.gameboard.board[e].missed}makeRandomMove(){let e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;if(this.isMoveLegal(a))return a;for(;!this.isMoveLegal(a);)e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;return a}}}}},t={};function a(d){var s=t[d];if(void 0!==s)return s.exports;var n=t[d]={exports:{}};return e[d](n,n.exports,a),n.exports}(()=>{"use strict";var e=a(776);function t(e){const t=document.getElementById("main"),a=document.createElement("div"),d=document.createElement("div"),s=document.createElement("div"),n=document.createElement("div"),o=document.createElement("h3"),r=document.createElement("div"),i=document.createElement("div"),l=document.createElement("div"),c=document.createElement("div"),h=document.createElement("h3");a.classList.add("my-section"),d.classList.add("my-game-section"),s.classList.add("my-board"),n.classList.add("my-name-box"),o.classList.add("my-name"),r.classList.add("enemy-section"),i.classList.add("enemy-game-section"),l.classList.add("enemy-board"),c.classList.add("enemy-name-box"),h.classList.add("enemy-name");for(let e=0;e<8;e+=1)for(let t=0;t<8;t+=1){const a=`${e},${t}`,d=document.createElement("div"),n=document.createElement("div");d.classList.add("my-div-box"),n.classList.add("enemy-div-box"),d.id=`P ${a}`,n.id=`E ${a}`,s.appendChild(d),l.appendChild(n)}o.textContent=e,h.textContent="Enemy",n.appendChild(o),d.appendChild(s),a.appendChild(n),a.appendChild(d),c.appendChild(h),i.appendChild(l),r.appendChild(c),r.appendChild(i),t.appendChild(a),t.appendChild(r),t.classList.add("main-game")}function d(){document.getElementById("main").innerHTML=""}!function(){const a=document.getElementById("main"),s=document.createElement("div"),n=document.createElement("h3"),o=document.createElement("input"),r=document.createElement("button");s.classList.add("pop-up-box"),n.classList.add("title-pop-up"),o.classList.add("input-pop-up"),r.classList.add("play-button"),n.textContent="Write your Name",r.innerHTML="Battle",o.type="text",r.type="submit",s.appendChild(n),s.appendChild(o),s.appendChild(r),a.appendChild(s),r.addEventListener("click",(()=>{o.value?(d(),function(a){const s=document.getElementById("main"),n=document.createElement("div"),o=document.createElement("div"),r=document.createElement("div"),i=document.createElement("div"),l=document.createElement("h3"),c=document.createElement("button"),h=["Carrier","Battleship","Cruiser","Submarine","Destroyer"];let m=[4,3,2,2,1];s.classList.add("main-game"),n.classList.add("my-section"),o.classList.add("my-game-section"),r.classList.add("my-board"),i.classList.add("my-name-box"),l.classList.add("my-name"),c.classList.add("axis");let u=0;l.textContent=`${a},  place your  ${h[u]}`,l.dataset.size=u,c.innerHTML="Axis X",c.addEventListener("click",(()=>{"Axis X"===c.innerHTML?c.innerHTML="Axis Y":c.innerHTML="Axis X"}));let p=new e.Gameboard;p.createBoard(),new e.Player(p);for(let e=0;e<8;e+=1)for(let s=0;s<8;s+=1){const n=`${e},${s}`,o=document.createElement("div");o.classList.add("my-div-box"),o.id=`${n}`,7===s&&(o.dataset.xNotAllowed=!0),7===e&&(o.dataset.yNotAllowed=!0),o.addEventListener("mouseover",(()=>{let e=document.querySelector(".my-name").textContent.split(" "),t=e[e.length-1],a=h.indexOf(t),d=m[a],s=document.querySelector(".axis").textContent.split(" ")[1],n=p.getAdjacents(p,d,o.id);if("X"===s){let e=n[0].some((e=>p.hasShip(e)));(!o.dataset.xNotAllowed||!e||!n[0].length<d)&&n[0].forEach((e=>{let t=document.getElementById(e);o.style.background="black",t.style.background="black",o.style.cursor="crosshair"})),(p.hasShip(o.id)||o.dataset.xNotAllowed||e||n[0].length<d)&&(o.dataset.xNotAllowed?(o.style.background="red",o.style.cursor="not-allowed"):n[0].forEach((e=>{let t=document.getElementById(e);o.style.background="red",t.style.background="red",o.style.cursor="not-allowed"})))}if("Y"===s){let e=n[1].some((e=>p.hasShip(e)));(!o.dataset.yNotAllowed||!e||!n[1].length<d)&&n[1].forEach((e=>{let t=document.getElementById(e);o.style.background="black",t.style.background="black",o.style.cursor="crosshair"})),(p.hasShip(o.id)||o.dataset.yNotAllowed||e||n[1].length<d)&&(o.dataset.yNotAllowed?(o.style.background="red",o.style.cursor="not-allowed"):n[1].forEach((e=>{let t=document.getElementById(e);o.style.background="red",t.style.background="red",o.style.cursor="not-allowed"})))}})),o.addEventListener("mouseleave",(()=>{let e=document.querySelector(".my-name").textContent.split(" "),t=e[e.length-1],a=h.indexOf(t),d=m[a],s=document.querySelector(".axis").textContent.split(" ")[1],n=p.getAdjacents(p,d,o.id);"X"===s&&(o.dataset.xNotAllowed&&(o.style.background="lightgoldenrodyellow",o.style.cursor="crosshair"),n[0].forEach((e=>{let t=document.getElementById(e);o.style.background="lightgoldenrodyellow",t.style.background="lightgoldenrodyellow",p.hasShip(t.id)&&(o.style.background="green",t.style.background="green")}))),"Y"===s&&(o.dataset.yNotAllowed&&(o.style.background="lightgoldenrodyellow",o.style.cursor="crosshair"),n[1].forEach((e=>{let t=document.getElementById(e);o.style.background="lightgoldenrodyellow",t.style.background="lightgoldenrodyellow"})))})),o.addEventListener("click",(()=>{u+=1,u===h.length&&(d(),t(a)),l.textContent=`${a},  place your  ${h[u]}`})),r.appendChild(o)}i.appendChild(l),i.appendChild(c),o.appendChild(r),n.appendChild(i),n.appendChild(o),p.placeShip(3,["0,1","0,2","0,3"]),s.appendChild(n),function(e){document.querySelectorAll(".my-div-box").forEach((t=>{let a=t.id;e.board[a].hasShip&&(t.style.background="green"),e.board[a].attacked&&(t.innerHTML="‚ùå",t.style.background="#F5C2C1"),e.board[a].missed&&(t.innerHTML="üí¶",t.style.background="lightblue")}))}(p)}(o.value)):alert("Please Write Your Name")}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,