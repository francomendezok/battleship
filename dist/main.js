(()=>{var e={776:e=>{class t{constructor(e){this.size=e,this.hit=0,this.sunk=!1,this.coordinates=[]}registerHit(){return this.hit+=1}isSunk(){return this.hit===this.size}addCoordinates(e){this.coordinates.push(e)}}e.exports={Ship:t,Gameboard:class{constructor(){this.board=[],this.ships=[]}createBoard(e=8){for(let t=0;t<e;t+=1)for(let a=0;a<e;a+=1){const e=`${t},${a}`;this.board[e]={coordinates:e,attacked:!1,missed:!1,hasShip:!1,ship:[]}}return this.board}isValid(e){let t=e.split(","),a=Number(t[0]),d=Number(t[1]);return a>=0&&a<=7&&d>=0&&d<=7}getBoard(){return this.board}addShip(e){this.ships.push(e)}placeShip(e,a){if(e!==a.length)return!1;const d=new t(e);for(let e=0;e<a.length;e++){if(this.hasShip(a[e]))return!1;this.board[a[e]].ship.push(a),this.board[a[e]].hasShip=!0}return d.addCoordinates(a),this.addShip(d),!0}isMoveLegal(e){return!this.board[e].attacked&&!this.board[e].missed}hasShip(e){return this.board[e].hasShip}placeEnemyShips(){let e=this.createCoordinates(),t=this.createCoordinates(),a=this.createCoordinates(),d=this.createCoordinates(),n=this.createCoordinates(),s=this.boardArray(),o=[this.getAdjacents(s,5,e),this.getAdjacents(s,4,t),this.getAdjacents(s,3,a),this.getAdjacents(s,3,d),this.getAdjacents(s,2,n)],i=[5,4,3,3,2],r=[];for(let e=0;e<o.length;e++){let t=o[e].filter((t=>t.length===i[e]));r.push(t)}r.forEach((e=>{this.placeShip(e[0].length,e[0])}))}createCoordinates(){let e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;if(this.hasShip(a)){for(;this.hasShip(a);)e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;return a}return a}getAdjacents(e,t,a){let d=e.boardArray(),n=[[],[]],s=1,o=8,i=0;for(let e=0;e<d.length;e++)if(d[e].coordinates===a){i=e;break}for(let e=0;e<t;e++){if(d[i+s]){let e=a.split(","),t=d[i+s].coordinates,o=t.split(",");t&&o[0]===e[0]&&(n[0].push(d[i+s].coordinates),s++)}if(d[i+o]){let e=a.split(","),t=d[i+o].coordinates;t.split(","),t&&t.includes(e[1])&&(n[1].push(d[i+o].coordinates),o+=8)}}return n}hasAllShipsPlaced(){return 5===this.ships.length}receiveAttack(e){let t=`${e}`;if(!this.board[t].attacked&&!this.board[t].missed)return this.board[t].hasShip?(this.board[t].attacked=!0,this.ships.forEach((e=>{e.coordinates[0].includes(t)&&(e.registerHit(),e.isSunk()&&(e.sunk=!0))}))):this.board[t].missed=!0,!0}getShips(){return this.ships}allSunk(){return this.ships.every((e=>!0===e.sunk))}boardArray(){const e=this.board,t=[];for(let a in e)t.push(e[a]);return t}},Player:class{constructor(e){this.gameboard=e}isMoveLegal(e){return!this.gameboard.board[e].attacked&&!this.gameboard.board[e].missed}makeRandomMove(){let e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;if(this.isMoveLegal(a))return a;for(;!this.isMoveLegal(a);)e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;return a}}}}},t={};function a(d){var n=t[d];if(void 0!==n)return n.exports;var s=t[d]={exports:{}};return e[d](s,s.exports,a),s.exports}(()=>{"use strict";var e=a(776);function t(e){const t=document.getElementById("main"),a=document.createElement("div"),d=document.createElement("div"),n=document.createElement("div"),s=document.createElement("div"),o=document.createElement("h3"),i=document.createElement("div"),r=document.createElement("div"),l=document.createElement("div"),c=document.createElement("div"),h=document.createElement("h3");a.classList.add("my-section"),d.classList.add("my-game-section"),n.classList.add("my-board"),s.classList.add("my-name-box"),o.classList.add("my-name"),i.classList.add("enemy-section"),r.classList.add("enemy-game-section"),l.classList.add("enemy-board"),c.classList.add("enemy-name-box"),h.classList.add("enemy-name");for(let e=0;e<8;e+=1)for(let t=0;t<8;t+=1){const a=`${e},${t}`,d=document.createElement("div"),s=document.createElement("div");d.classList.add("my-div-box"),s.classList.add("enemy-div-box"),d.id=`${a}`,s.id=`E ${a}`,n.appendChild(d),l.appendChild(s)}o.innerHTML=name,h.innerHTML="Enemy",s.appendChild(o),d.appendChild(n),a.appendChild(s),a.appendChild(d),c.appendChild(h),r.appendChild(l),i.appendChild(c),i.appendChild(r),t.appendChild(a),t.appendChild(i),t.classList.add("main-game")}function d(e){let t=e.boardArray();for(let e=0;e<t.length;e++){if(t[e].hasShip&&(document.getElementById(t[e].coordinates).style.background="green"),t[e].attacked){let a=document.getElementById(t[e].coordinates);a.innerHTML="❌",a.style.background="#F5C2C1"}if(t[e].missed){let a=document.getElementById(t[e].coordinates);a.innerHTML="💦",a.style.background="lightblue"}t[e].hasShip||t[e].attacked||t[e].missed||(document.getElementById(t[e].coordinates).style.background="lightgoldenrodyellow")}}function n(){document.getElementById("main").innerHTML=""}!function(){const a=document.getElementById("main"),s=document.createElement("div"),o=document.createElement("h3"),i=document.createElement("input"),r=document.createElement("button");s.classList.add("pop-up-box"),o.classList.add("title-pop-up"),i.classList.add("input-pop-up"),r.classList.add("play-button"),o.textContent="Write your Name",r.innerHTML="Battle",i.type="text",r.type="submit",s.appendChild(o),s.appendChild(i),s.appendChild(r),a.appendChild(s),r.addEventListener("click",(()=>{i.value?(n(),function(a){const s=document.getElementById("main"),o=document.createElement("div"),i=document.createElement("div"),r=document.createElement("div"),l=document.createElement("div"),c=document.createElement("h3"),h=document.createElement("button"),m=["Carrier","Battleship","Cruiser","Submarine","Destroyer"];let u=[4,3,2,2,1];s.classList.add("main-game"),o.classList.add("my-section"),i.classList.add("my-game-section"),r.classList.add("my-board"),l.classList.add("my-name-box"),c.classList.add("my-name"),h.classList.add("axis");let p=0;c.innerHTML=`${a},  place your  ${m[p]}`,c.dataset.size=p,h.innerHTML="Axis X",h.addEventListener("click",(()=>{"Axis X"===h.innerHTML?h.innerHTML="Axis Y":h.innerHTML="Axis X"}));let y=new e.Gameboard;y.createBoard(),new e.Player(y);for(let e=0;e<8;e+=1)for(let a=0;a<8;a+=1){const s=`${e},${a}`,o=document.createElement("div");o.classList.add("my-div-box"),o.id=`${s}`,7===a&&(o.dataset.xNotAllowed=!0),7===e&&(o.dataset.yNotAllowed=!0),o.addEventListener("mouseover",(()=>{let e=document.querySelector(".my-name").textContent.split(" "),t=e[e.length-1],a=m.indexOf(t),d=u[a],n=document.querySelector(".axis").textContent.split(" ")[1],s=y.getAdjacents(y,d,o.id);if("X"===n){let e=s[0].some((e=>y.hasShip(e)));y.hasShip(o.id)||e||s[0].length<d?(y.hasShip(o.id)||(o.style.background="red"),o.style.cursor="not-allowed"):s[0].forEach((e=>{y.hasShip(e)?(o.style.cursor="not-allowed",document.getElementById(e).style.background="green"):(document.getElementById(e).style.background="black",o.style.background="black",o.style.cursor="crosshair")}))}if("Y"===n){let e=s[1].some((e=>y.hasShip(e)));y.hasShip(o.id)||e||s[1].length<d?(y.hasShip(o.id)||(o.style.background="red"),o.style.cursor="not-allowed"):s[1].forEach((e=>{y.hasShip(e)?(o.style.cursor="not-allowed",document.getElementById(e).style.background="green"):(document.getElementById(e).style.background="black",o.style.background="black",o.style.cursor="crosshair")}))}})),o.addEventListener("mouseleave",(()=>{let e=document.querySelector(".my-name").textContent.split(" "),t=e[e.length-1],a=m.indexOf(t),d=u[a],n=document.querySelector(".axis").textContent.split(" ")[1],s=y.getAdjacents(y,d,o.id);"X"===n&&(o.dataset.xNotAllowed&&(o.style.background="lightgoldenrodyellow",o.style.cursor="crosshair"),y.hasShip(o.id)?(o.style.background="green",o.style.cursor="not-allowed"):s[0].forEach((e=>{y.hasShip(e)?(o.style.cursor="not-allowed",o.style.background="lightgoldenrodyellow",document.getElementById(e).style.background="green"):(document.getElementById(e).style.background="lightgoldenrodyellow",o.style.background="lightgoldenrodyellow")}))),"Y"===n&&(o.dataset.yNotAllowed&&(o.style.background="lightgoldenrodyellow",o.style.cursor="crosshair"),y.hasShip(o.id)?(o.style.background="green",o.style.cursor="not-allowed"):s[1].forEach((e=>{y.hasShip(e)?(o.style.cursor="not-allowed",o.style.background="lightgoldenrodyellow",document.getElementById(e).style.background="green"):(document.getElementById(e).style.background="lightgoldenrodyellow",o.style.background="lightgoldenrodyellow")})))})),o.addEventListener("click",(()=>{let e=document.querySelector(".my-name").textContent,a=e.split(" "),s=a[a.length-1],i=m.indexOf(s),r=u[i],l=document.querySelector(".axis").textContent.split(" ")[1],h=y.getAdjacents(y,r,o.id);"X"===l&&(r+=1,h[0].unshift(o.id),y.placeShip(r,h[0])&&(d(y),p+=1,p===m.length&&(n(),t()),c.innerHTML="",c.innerHTML=`${e},  place your ${m[p]}`)),"Y"===l&&(r+=1,h[1].unshift(o.id),y.placeShip(r,h[1])&&(d(y),p+=1,p===m.length&&(n(),t()),c.innerHTML="",c.innerHTML=`${e},  place your ${m[p]}`))})),r.appendChild(o)}l.appendChild(c),l.appendChild(h),i.appendChild(r),o.appendChild(l),o.appendChild(i),s.appendChild(o),d(y)}(i.value)):alert("Please Write Your Name")}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,