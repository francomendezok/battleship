(()=>{var e={776:e=>{class t{constructor(e){this.size=e,this.hit=0,this.sunk=!1,this.coordinates=[]}registerHit(){return this.hit+=1}isSunk(){return this.hit===this.size}addCoordinates(e){this.coordinates.push(e)}}e.exports={Ship:t,Gameboard:class{constructor(){this.board=[],this.ships=[]}createBoard(e=8){for(let t=0;t<e;t+=1)for(let a=0;a<e;a+=1){const e=`${t},${a}`;this.board[e]={coordinates:e,attacked:!1,missed:!1,hasShip:!1,ship:[]}}return this.board}isValid(e){let t=e.split(","),a=Number(t[0]),s=Number(t[1]);return a>=0&&a<=7&&s>=0&&s<=7}getBoard(){return this.board}addShip(e){this.ships.push(e)}placeShip(e,a){if(e!==a.length)return"Size and coordinates length should be equal";const s=new t(e);for(let e=0;e<a.length;e++){if(this.hasShip(a[e]))return!1;this.board[a[e]].ship.push(a),this.board[a[e]].hasShip=!0}return s.addCoordinates(a),this.addShip(s),!0}isMoveLegal(e){return!this.board[e].attacked&&!this.board[e].missed}hasShip(e){return this.board[e].hasShip}placeEnemyShips(){let e=this.createCoordinates(),t=this.createCoordinates(),a=this.createCoordinates(),s=this.createCoordinates(),d=this.createCoordinates(),n=this.boardArray(),o=[this.getAdjacents(n,5,e),this.getAdjacents(n,4,t),this.getAdjacents(n,3,a),this.getAdjacents(n,3,s),this.getAdjacents(n,2,d)],i=[5,4,3,3,2],r=[];for(let e=0;e<o.length;e++){let t=o[e].filter((t=>t.length===i[e]));r.push(t)}r.forEach((e=>{this.placeShip(e[0].length,e[0])}))}createCoordinates(){let e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;if(this.hasShip(a)){for(;this.hasShip(a);)e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;return a}return a}getAdjacents(e,t,a){let s=e.boardArray(),d=[[],[]],n=1,o=8,i=0;for(let e=0;e<s.length;e++)if(s[e].coordinates===a){i=e;break}for(let e=0;e<t;e++){if(s[i+n]){let e=a.split(","),t=s[i+n].coordinates,o=t.split(",");t&&o[0]===e[0]&&(d[0].push(s[i+n].coordinates),n++)}if(s[i+o]){let e=a.split(","),t=s[i+o].coordinates;t.split(","),t&&t.includes(e[1])&&(d[1].push(s[i+o].coordinates),o+=8)}}return d}hasAllShipsPlaced(){return 5===this.ships.length}receiveAttack(e){let t=`${e}`;if(!this.board[t].attacked&&!this.board[t].missed)return this.board[t].hasShip?(this.board[t].attacked=!0,this.ships.forEach((e=>{e.coordinates[0].includes(t)&&(e.registerHit(),e.isSunk()&&(e.sunk=!0))}))):this.board[t].missed=!0,!0}getShips(){return this.ships}allSunk(){return this.ships.every((e=>!0===e.sunk))}boardArray(){const e=this.board,t=[];for(let a in e)t.push(e[a]);return t}},Player:class{constructor(e){this.gameboard=e}isMoveLegal(e){return!this.gameboard.board[e].attacked&&!this.gameboard.board[e].missed}makeRandomMove(){let e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;if(this.isMoveLegal(a))return a;for(;!this.isMoveLegal(a);)e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;return a}}}}},t={};function a(s){var d=t[s];if(void 0!==d)return d.exports;var n=t[s]={exports:{}};return e[s](n,n.exports,a),n.exports}(()=>{"use strict";var e=a(776);function t(e){const t=document.getElementById("main"),a=document.createElement("div"),s=document.createElement("div"),d=document.createElement("div"),n=document.createElement("div"),o=document.createElement("h3"),i=document.createElement("div"),r=document.createElement("div"),l=document.createElement("div"),c=document.createElement("div"),h=document.createElement("h3");a.classList.add("my-section"),s.classList.add("my-game-section"),d.classList.add("my-board"),n.classList.add("my-name-box"),o.classList.add("my-name"),i.classList.add("enemy-section"),r.classList.add("enemy-game-section"),l.classList.add("enemy-board"),c.classList.add("enemy-name-box"),h.classList.add("enemy-name");for(let e=0;e<8;e+=1)for(let t=0;t<8;t+=1){const a=`${e},${t}`,s=document.createElement("div"),n=document.createElement("div");s.classList.add("my-div-box"),n.classList.add("enemy-div-box"),s.id=`P ${a}`,n.id=`E ${a}`,d.appendChild(s),l.appendChild(n)}o.textContent=e,h.textContent="Enemy",n.appendChild(o),s.appendChild(d),a.appendChild(n),a.appendChild(s),c.appendChild(h),r.appendChild(l),i.appendChild(c),i.appendChild(r),t.appendChild(a),t.appendChild(i),t.classList.add("main-game")}function s(){document.getElementById("main").innerHTML=""}!function(){const a=document.getElementById("main"),d=document.createElement("div"),n=document.createElement("h3"),o=document.createElement("input"),i=document.createElement("button");d.classList.add("pop-up-box"),n.classList.add("title-pop-up"),o.classList.add("input-pop-up"),i.classList.add("play-button"),n.textContent="Write your Name",i.innerHTML="Battle",o.type="text",i.type="submit",d.appendChild(n),d.appendChild(o),d.appendChild(i),a.appendChild(d),i.addEventListener("click",(()=>{o.value?(s(),function(a){const d=document.getElementById("main"),n=document.createElement("div"),o=document.createElement("div"),i=document.createElement("div"),r=document.createElement("div"),l=document.createElement("h3"),c=document.createElement("button"),h=["Carrier","Battleship","Cruiser","Submarine","Destroyer"];let m=[4,3,2,2,1];d.classList.add("main-game"),n.classList.add("my-section"),o.classList.add("my-game-section"),i.classList.add("my-board"),r.classList.add("my-name-box"),l.classList.add("my-name"),c.classList.add("axis");let u=0;l.textContent=`${a},  place your  ${h[u]}`,l.dataset.size=u,c.innerHTML="Axis X",c.addEventListener("click",(()=>{"Axis X"===c.innerHTML?c.innerHTML="Axis Y":c.innerHTML="Axis X"}));let p=new e.Gameboard;p.createBoard(),new e.Player(p);for(let e=0;e<8;e+=1)for(let d=0;d<8;d+=1){const n=`${e},${d}`,o=document.createElement("div");o.classList.add("my-div-box"),o.id=`${n}`,7===d&&(o.dataset.xNotAllowed=!0),7===e&&(o.dataset.yNotAllowed=!0),o.addEventListener("mouseover",(()=>{let e=document.querySelector(".my-name").textContent.split(" "),t=e[e.length-1],a=h.indexOf(t),s=m[a],d=document.querySelector(".axis").textContent.split(" ")[1],n=p.getAdjacents(p,s,o.id);if("X"===d){let e=n[0].some((e=>p.hasShip(e)));p.hasShip(o.id)||o.dataset.cNotAllowed||e||n[0].length<s?(p.hasShip(o.id)||(o.style.background="red"),o.style.cursor="not-allowed"):n[0].forEach((e=>{document.getElementById(e).style.background="black",o.style.background="black",o.style.cursor="crosshair"}))}if("Y"===d){let e=n[1].some((e=>p.hasShip(e)));p.hasShip(o.id)||o.dataset.yNotAllowed||e||n[1].length<s?(p.hasShip(o.id)||(o.style.background="red"),o.style.cursor="not-allowed"):n[1].forEach((e=>{document.getElementById(e).style.background="black",o.style.background="black",o.style.cursor="crosshair"}))}})),o.addEventListener("mouseleave",(()=>{let e=document.querySelector(".my-name").textContent.split(" "),t=e[e.length-1],a=h.indexOf(t),s=m[a],d=document.querySelector(".axis").textContent.split(" ")[1],n=p.getAdjacents(p,s,o.id);"X"===d&&(o.dataset.xNotAllowed&&(o.style.background="lightgoldenrodyellow",o.style.cursor="crosshair"),p.hasShip(o.id)?(o.style.background="green",o.style.cursor="not-allowed"):n[0].forEach((e=>{p.hasShip(e)?(o.style.cursor="not-allowed",document.getElementById(e).style.background="green"):(document.getElementById(e).style.background="lightgoldenrodyellow",o.style.background="lightgoldenrodyellow")}))),"Y"===d&&(o.dataset.yNotAllowed&&(o.style.background="lightgoldenrodyellow",o.style.cursor="crosshair"),p.hasShip(o.id)?(o.style.background="green",o.style.cursor="not-allowed"):n[1].forEach((e=>{p.hasShip(e)?(o.style.cursor="not-allowed",document.getElementById(e).style.background="green"):(document.getElementById(e).style.background="lightgoldenrodyellow",o.style.background="lightgoldenrodyellow")})))})),o.addEventListener("click",(()=>{u+=1,u===h.length&&(s(),t(a)),l.textContent=`${a},  place your  ${h[u]}`})),i.appendChild(o)}r.appendChild(l),r.appendChild(c),o.appendChild(i),n.appendChild(r),n.appendChild(o),p.placeShip(3,["1,1","1,2","1,3"]),d.appendChild(n),function(e){document.querySelectorAll(".my-div-box").forEach((t=>{let a=t.id;e.board[a].hasShip&&(t.style.background="green"),e.board[a].attacked&&(t.innerHTML="‚ùå",t.style.background="#F5C2C1"),e.board[a].missed&&(t.innerHTML="üí¶",t.style.background="lightblue")}))}(p)}(o.value)):alert("Please Write Your Name")}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,