(()=>{var e={776:e=>{class t{constructor(e){this.size=e,this.hit=0,this.sunk=!1,this.coordinates=[]}registerHit(){return this.hit+=1}isSunk(){return this.hit===this.size}addCoordinates(e){this.coordinates.push(e)}}class a{constructor(){this.board=[],this.ships=[]}createBoard(e=8){for(let t=0;t<e;t+=1)for(let a=0;a<e;a+=1){const e=`${t},${a}`;this.board[e]={coordinates:e,attacked:!1,missed:!1,hasShip:!1,ship:[]}}return this.board}isValid(e){let t=e.split(","),a=Number(t[0]),i=Number(t[1]);return a>=0&&a<=7&&i>=0&&i<=7}getBoard(){return this.board}addShip(e){this.ships.push(e)}placeShip(e,a){if(e!==a.length)return"Size and coordinates length should be equal";const i=new t(e);for(let e=0;e<a.length;e++)if(this.isValid(a[e]))this.board[a[e]].ship.push(a),this.board[a[e]].hasShip=!0;else if(!this.isValid(a[e]))return"No Valid";return i.addCoordinates(a),this.addShip(i),this.board}isMoveLegal(e){return!this.board[e].attacked&&!this.board[e].missed}placeEnemyShips(e){this.createCoordinates(5),this.createCoordinates(4),this.createCoordinates(3),this.createCoordinates(3),this.createCoordinates(2)}createCoordinates(e){let t=Math.floor(8*Math.random()),a=Math.floor(8*Math.random()),i=`${t},${a}`,s=[];if(this.isMoveLegal(i))s.push(i);else for(;!this.isMoveLegal(i);)t=Math.floor(8*Math.random()),a=Math.floor(8*Math.random()),i=`${t},${a}`;let n=i.split(",");s.push(i);for(let t=0;t<e-1;t++)n[Math.floor(2*Math.random())];return s}getAdjacents(e,t,a){let i=[[],[],[],[]],s=8,n=1,d=8,o=1,r=0;for(let t=0;t<e.length;t++)if(e[t].coordinates===a){r=t;break}for(let c=0;c<t;c++){if(e[r-s]){let t=a.split(","),n=e[r-s].coordinates;n.split(","),n&&n.includes(t[1])&&(i[0].push(e[r-s].coordinates),s+=8)}if(e[r+n]){let t=a.split(","),s=e[r+n].coordinates,d=s.split(",");s&&d[0]===t[0]&&(i[1].push(e[r+n].coordinates),n++)}if(e[r+d]){let t=a.split(","),s=e[r+d].coordinates;s.split(","),s&&s.includes(t[1])&&(i[2].push(e[r+d].coordinates),d+=8)}if(e[r-o]){let t=a.split(","),s=e[r-o].coordinates,n=s.split(",");s&&n[0]===t[0]&&(i[3].push(e[r-o].coordinates),o++)}}return i}receiveAttack(e){let t=`${e}`;if(!this.board[t].attacked&&!this.board[t].missed)return this.board[t].hasShip?(this.board[t].attacked=!0,this.ships.forEach((e=>{e.coordinates[0].includes(t)&&(e.registerHit(),e.isSunk()&&(e.sunk=!0))}))):this.board[t].missed=!0,!0}getShips(){return this.ships}allSunk(){return this.ships.every((e=>!0===e.sunk))}boardArray(){const e=this.board,t=[];for(let a in e)t.push(e[a]);return t}}let i=new a;i.createBoard(),i.placeShip(3,["7,1","7,2","7,3"]),i.placeShip(3,["0,1","0,2","0,3"]),i.receiveAttack("0,1"),i.receiveAttack("0,2"),i.receiveAttack("0,3"),i.receiveAttack("7,1"),i.receiveAttack("7,2"),i.receiveAttack("7,3");let s=i.boardArray();i.getAdjacents(s,4,"6,7");class n{constructor(e){this.gameboard=e}isMoveLegal(e){return!this.gameboard.board[e].attacked&&!this.gameboard.board[e].missed}makeRandomMove(){let e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;if(this.isMoveLegal(a))return a;for(;!this.isMoveLegal(a);)e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;return a}}new n(i),e.exports={Ship:t,Gameboard:a,Player:n}}},t={};function a(i){var s=t[i];if(void 0!==s)return s.exports;var n=t[i]={exports:{}};return e[i](n,n.exports,a),n.exports}(()=>{"use strict";var e=a(776);function t(){const a=document.getElementById("main"),r=document.createElement("div"),c=document.createElement("h3"),l=document.createElement("input"),m=document.createElement("button");r.classList.add("pop-up-box"),c.classList.add("title-pop-up"),l.classList.add("input-pop-up"),m.classList.add("play-button"),c.textContent="Write your Name",m.innerHTML="Battle",l.type="text",m.type="submit",r.appendChild(c),r.appendChild(l),r.appendChild(m),a.appendChild(r),m.addEventListener("click",(()=>{o(),function(a){let r=new e.Gameboard,c=new e.Gameboard;r.createBoard(),c.createBoard(),function(e){const t=document.getElementById("main"),a=document.createElement("div"),i=document.createElement("div"),s=document.createElement("div"),n=document.createElement("div"),d=document.createElement("h3"),o=document.createElement("div"),r=document.createElement("div"),c=document.createElement("div"),l=document.createElement("div"),m=document.createElement("div"),h=document.createElement("h3"),p=document.createElement("img"),u=document.createElement("img"),b=document.createElement("img"),g=document.createElement("img"),f=document.createElement("img");p.src="../dist/Images/5.png",u.src="../dist/Images/5.png",b.src="../dist/Images/5.png",g.src="../dist/Images/5.png",f.src="../dist/Images/5.png",[p,u,b,g,f].forEach((e=>{e.classList.add("ship"),o.appendChild(e)})),a.classList.add("my-section"),i.classList.add("my-game-section"),s.classList.add("my-board"),n.classList.add("my-name-box"),d.classList.add("my-name"),o.classList.add("my-ships"),r.classList.add("enemy-section"),c.classList.add("enemy-game-section"),l.classList.add("enemy-board"),m.classList.add("enemy-name-box"),h.classList.add("enemy-name");for(let e=0;e<8;e+=1)for(let t=0;t<8;t+=1){const a=`${e},${t}`,i=document.createElement("div"),n=document.createElement("div");i.classList.add("my-div-box"),n.classList.add("enemy-div-box"),i.id=`P ${a}`,n.id=`E ${a}`,s.appendChild(i),l.appendChild(n)}d.textContent=e,h.textContent="Enemy",n.appendChild(d),i.appendChild(s),a.appendChild(n),a.appendChild(i),m.appendChild(h),c.appendChild(l),r.appendChild(m),r.appendChild(c),t.appendChild(a),t.appendChild(o),t.appendChild(r),t.classList.add("main-game")}(a),function(e){let t=document.querySelectorAll(".ship"),a=[5,4,3,3,2];for(let i=0;i<t.length;i++){let s=t[i].dataset.size=a[i];t[i].addEventListener("click",(()=>{n(e,s),d(t,t[i])})),0===i&&t[i].click()}}(r);let l=new e.Player(r),m=new e.Player(c);i(l.gameboard),s(m.gameboard),[...document.querySelectorAll(".enemy-div-box")].forEach((e=>{e.addEventListener("click",(e=>{let a=e.target.id.split(" ")[1],n=m.makeRandomMove(),d=r.receiveAttack(n);if(c.receiveAttack(a)){s(m.gameboard),setTimeout((function(){for(;!d;)n=m.makeRandomMove(),d=r.receiveAttack(n);i(l.gameboard)}),1e3);let e=r.allSunk(),a=c.allSunk();e&&(o(),function(){const e=document.getElementById("main"),a=document.createElement("div"),i=document.createElement("h3"),s=document.createElement("button");a.classList.add("pop-up-box"),i.classList.add("title-pop-up"),s.classList.add("play-button"),i.textContent="You Lose",s.innerHTML="Play Again",s.type="submit",a.appendChild(i),a.appendChild(s),e.appendChild(a),s.addEventListener("click",(()=>{o(),t()}))}()),a&&(o(),function(){const e=document.getElementById("main"),a=document.createElement("div"),i=document.createElement("h3"),s=document.createElement("button");a.classList.add("pop-up-box"),i.classList.add("title-pop-up"),s.classList.add("play-button"),i.textContent="You Win",s.innerHTML="Play Again",s.type="submit",a.appendChild(i),a.appendChild(s),e.appendChild(a),s.addEventListener("click",(()=>{o(),t()}))}())}}))}))}(l.value)}))}function i(e){const t=document.querySelectorAll(".my-div-box");for(const a of t){let t=a.id.split(" ")[1];e.board[t].hasShip&&(a.style.background="green"),e.board[t].attacked&&(a.innerHTML="❌",a.style.background="#F5C2C1"),e.board[t].missed&&(a.innerHTML="💦",a.style.background="lightblue")}}function s(e){const t=document.querySelectorAll(".enemy-div-box");for(const a of t){let t=a.id.split(" ")[1];e.board[t].hasShip&&(a.style.background="orange"),e.board[t].attacked&&(a.innerHTML="❌",a.style.background="#F5C2C1"),e.board[t].missed&&(a.innerHTML="💦",a.style.background="lightblue")}}function n(e,t){let a=document.querySelectorAll(".my-div-box"),i=e.boardArray();t?a.forEach((a=>{a.addEventListener("mouseover",(()=>{let s=a.id.split(","),n=`${s[0].split(" ")[1]},${s[1]}`;e.getAdjacents(i,t-1,n).forEach((e=>{e.forEach((e=>{let t=`P ${e}`;document.getElementById(t)}))}))})),a.addEventListener("mouseout",(()=>{let s=a.id.split(","),n=`${s[0].split(" ")[1]},${s[1]}`;e.getAdjacents(i,t-1,n).forEach((e=>{e.forEach((e=>{let t=`P ${e}`,i=document.getElementById(t);a.innerHTML=" ",i.innerHTML=" "}))}))}))})):alert("No size")}function d(e,t){e.forEach((e=>{e.classList.contains("ship-selected")&&e.classList.remove("ship-selected"),e===t&&e.classList.add("ship-selected")}))}function o(){document.getElementById("main").innerHTML=""}t()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,