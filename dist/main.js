(()=>{var e={776:e=>{class t{constructor(e){this.size=e,this.hit=0,this.sunk=!1,this.coordinates=[]}registerHit(){return this.hit+=1}isSunk(){return this.hit===this.size}addCoordinates(e){this.coordinates.push(e)}}e.exports={Ship:t,Gameboard:class{constructor(){this.board=[],this.ships=[]}createBoard(e=8){for(let t=0;t<e;t+=1)for(let a=0;a<e;a+=1){const e=`${t},${a}`;this.board[e]={coordinates:e,attacked:!1,missed:!1,hasShip:!1,ship:[]}}return this.board}isValid(e){let t=e.split(","),a=Number(t[0]),n=Number(t[1]);return a>=0&&a<=7&&n>=0&&n<=7}getBoard(){return this.board}addShip(e){this.ships.push(e)}placeShip(e,a){if(e!==a.length)return!1;const n=new t(e);for(let e=0;e<a.length;e++){if(this.hasShip(a[e]))return!1;this.board[a[e]].ship.push(a),this.board[a[e]].hasShip=!0}return n.addCoordinates(a),this.addShip(n),!0}isMoveLegal(e){return!this.board[e].attacked&&!this.board[e].missed}hasShip(e){return this.board[e].hasShip}placeEnemyShips(e){let t=this.createCoordinates(),a=this.createCoordinates(),n=this.createCoordinates(),d=this.createCoordinates(),s=this.createCoordinates(),i=[e.getAdjacents(e,5,t),e.getAdjacents(e,4,a),e.getAdjacents(e,3,n),e.getAdjacents(e,3,d),e.getAdjacents(e,2,s)],o=[5,4,3,3,2];for(let t=0;t<i.length;t++){let a=i[t].filter((e=>e.length===o[t]));if(a.length){let n=this.placeShip(o[t],a[1]||a[0]);for(;!n;){let a=this.createCoordinates(),d=e.getAdjacents(e,o[t],a),s=d.filter((e=>e.length===o[t]));for(;!s.length;)a=this.createCoordinates(),d=e.getAdjacents(e,o[t],a),s=d.filter((e=>e.length===o[t]));n=this.placeShip(o[t],s[1]||s[0])}}else{for(;!a.length;){let n=this.createCoordinates();a=e.getAdjacents(e,o[t],n).filter((e=>e.length===o[t]))}let n=this.placeShip(o[t],a[1]||a[0]);for(;!n;){let a=this.createCoordinates(),d=e.getAdjacents(e,o[t],a),s=d.filter((e=>e.length===o[t]));for(;!s.length;)a=this.createCoordinates(),d=e.getAdjacents(e,o[t],a),s=d.filter((e=>e.length===o[t]));n=this.placeShip(o[t],s[1]||s[0])}}}}createCoordinates(){let e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;if(this.hasShip(a)){for(;this.hasShip(a);)e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;return a}return a}getAdjacents(e,t,a){let n=e.boardArray(),d=[[],[]],s=1,i=8,o=0;for(let e=0;e<n.length;e++)if(n[e].coordinates===a){o=e;break}for(let e=0;e<t;e++){if(n[o+s]){let e=a.split(","),t=n[o+s].coordinates,i=t.split(",");t&&i[0]===e[0]&&(d[0].push(n[o+s].coordinates),s++)}if(n[o+i]){let e=a.split(","),t=n[o+i].coordinates;t.split(","),t&&t.includes(e[1])&&(d[1].push(n[o+i].coordinates),i+=8)}}return d}hasAllShipsPlaced(){return 5===this.ships.length}receiveAttack(e){let t=`${e}`;if(!this.board[t].attacked&&!this.board[t].missed)return this.board[t].hasShip?(this.board[t].attacked=!0,this.ships.forEach((e=>{e.coordinates[0].includes(t)&&(e.registerHit(),e.isSunk()&&(e.sunk=!0))}))):this.board[t].missed=!0,!0}getShips(){return this.ships}allSunk(){return this.ships.every((e=>!0===e.sunk))}boardArray(){const e=this.board,t=[];for(let a in e)t.push(e[a]);return t}},Player:class{constructor(e){this.gameboard=e}isMoveLegal(e){return!this.gameboard.board[e].attacked&&!this.gameboard.board[e].missed}makeRandomMove(){let e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;if(this.isMoveLegal(a))return a;for(;!this.isMoveLegal(a);)e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;return a}}}}},t={};function a(n){var d=t[n];if(void 0!==d)return d.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,a),s.exports}(()=>{"use strict";var e=a(776);function t(){const t=document.getElementById("main"),a=document.createElement("div"),s=document.createElement("h3"),o=document.createElement("input"),r=document.createElement("button");a.classList.add("pop-up-box"),s.classList.add("title-pop-up"),o.classList.add("input-pop-up"),r.classList.add("play-button"),s.textContent="Write your Name",r.innerHTML="Battle",o.type="text",r.type="submit",a.appendChild(s),a.appendChild(o),a.appendChild(r),t.appendChild(a),r.addEventListener("click",(()=>{o.value?(i(),function(t){const a=document.getElementById("main"),s=document.createElement("div"),o=document.createElement("div"),r=document.createElement("div"),l=document.createElement("div"),c=document.createElement("h3"),h=document.createElement("button"),u=["Carrier","Battleship","Cruiser","Submarine","Destroyer"];let m=[4,3,2,2,1];a.classList.add("main-game"),s.classList.add("my-section"),o.classList.add("my-game-section"),r.classList.add("my-board"),l.classList.add("my-name-box"),c.classList.add("my-name"),h.classList.add("axis");let p=0;c.innerHTML=`${t},  place your  ${u[p]}`,c.dataset.size=p,h.innerHTML="Axis X",h.addEventListener("click",(()=>{"Axis X"===h.innerHTML?h.innerHTML="Axis Y":h.innerHTML="Axis X"}));let y=new e.Gameboard;y.createBoard(),new e.Player(y);for(let e=0;e<8;e+=1)for(let t=0;t<8;t+=1){const a=`${e},${t}`,s=document.createElement("div");s.classList.add("my-div-box"),s.id=`${a}`,7===t&&(s.dataset.xNotAllowed=!0),7===e&&(s.dataset.yNotAllowed=!0),s.addEventListener("mouseover",(()=>{let e=document.querySelector(".my-name").textContent.split(" "),t=e[e.length-1],a=u.indexOf(t),n=m[a],d=document.querySelector(".axis").textContent.split(" ")[1],i=y.getAdjacents(y,n,s.id);if("X"===d){let e=i[0].some((e=>y.hasShip(e)));y.hasShip(s.id)||e||i[0].length<n?(y.hasShip(s.id)||(s.style.background="red"),s.style.cursor="not-allowed"):i[0].forEach((e=>{y.hasShip(e)?(s.style.cursor="not-allowed",document.getElementById(e).style.background="#15803d"):(document.getElementById(e).style.background="black",s.style.background="black",s.style.cursor="crosshair")}))}if("Y"===d){let e=i[1].some((e=>y.hasShip(e)));y.hasShip(s.id)||e||i[1].length<n?(y.hasShip(s.id)||(s.style.background="red"),s.style.cursor="not-allowed"):i[1].forEach((e=>{y.hasShip(e)?(s.style.cursor="not-allowed",document.getElementById(e).style.background="#15803d"):(document.getElementById(e).style.background="black",s.style.background="black",s.style.cursor="crosshair")}))}})),s.addEventListener("mouseleave",(()=>{let e=document.querySelector(".my-name").textContent.split(" "),t=e[e.length-1],a=u.indexOf(t),n=m[a],d=document.querySelector(".axis").textContent.split(" ")[1],i=y.getAdjacents(y,n,s.id);"X"===d&&(s.dataset.xNotAllowed&&(s.style.background="#172554",s.style.cursor="crosshair"),y.hasShip(s.id)?(s.style.background="#15803d",s.style.cursor="not-allowed"):i[0].forEach((e=>{y.hasShip(e)?(s.style.cursor="not-allowed",s.style.background="#172554",document.getElementById(e).style.background="#15803d"):(document.getElementById(e).style.background="#172554",s.style.background="#172554")}))),"Y"===d&&(s.dataset.yNotAllowed&&(s.style.background="#172554",s.style.cursor="crosshair"),y.hasShip(s.id)?(s.style.background="#15803d",s.style.cursor="not-allowed"):i[1].forEach((e=>{y.hasShip(e)?(s.style.cursor="not-allowed",s.style.background="#172554",document.getElementById(e).style.background="#15803d"):(document.getElementById(e).style.background="#172554",s.style.background="#172554")})))})),s.addEventListener("click",(()=>{let e=document.querySelector(".my-name").textContent.split(" "),t=e[e.length-1],a=e[0].split(",")[0],o=u.indexOf(t),r=m[o],l=document.querySelector(".axis").textContent.split(" ")[1],h=y.getAdjacents(y,r,s.id);"X"===l&&(r+=1,h[0].unshift(s.id),y.placeShip(r,h[0])&&(d(y),p+=1,p===u.length&&(i(),n(a,y)),c.innerHTML=`${a},  place your ${u[p]}`)),"Y"===l&&(r+=1,h[1].unshift(s.id),y.placeShip(r,h[1])&&(d(y),p+=1,p===u.length&&(i(),n(a,y)),c.innerHTML=`${a},  place your ${u[p]}`))})),r.appendChild(s)}l.appendChild(c),l.appendChild(h),o.appendChild(r),s.appendChild(l),s.appendChild(o),a.appendChild(s),d(y)}(o.value)):alert("Please Write Your Name")}))}function n(a,n){const o=document.getElementById("main"),r=document.createElement("div"),l=document.createElement("div"),c=document.createElement("div"),h=document.createElement("div"),u=document.createElement("h3"),m=document.createElement("div"),p=document.createElement("div"),y=document.createElement("div"),g=document.createElement("div"),b=document.createElement("h3");r.classList.add("my-section"),l.classList.add("my-game-section"),c.classList.add("my-board"),h.classList.add("my-name-box"),u.classList.add("my-name"),m.classList.add("enemy-section"),p.classList.add("enemy-game-section"),y.classList.add("enemy-board"),g.classList.add("enemy-name-box"),b.classList.add("enemy-name");for(let e=0;e<8;e+=1)for(let t=0;t<8;t+=1){const a=`${e},${t}`,n=document.createElement("div"),d=document.createElement("div");n.classList.add("my-div-box"),d.classList.add("enemy-div-box"),n.id=`${a}`,d.id=`E ${a}`,c.appendChild(n),y.appendChild(d)}u.innerHTML=a,b.innerHTML="Enemy",h.appendChild(u),l.appendChild(c),r.appendChild(h),r.appendChild(l),g.appendChild(b),p.appendChild(y),m.appendChild(g),m.appendChild(p),o.appendChild(r),o.appendChild(m),o.classList.add("main-game"),d(n),function(a){let n=new e.Gameboard,o=a,r=new e.Player(o);n.createBoard();let l=new e.Player(n);n.placeEnemyShips(n),d(a),s(n),[...document.querySelectorAll(".enemy-div-box")].forEach((e=>{e.addEventListener("click",(e=>{let a=e.target.id.split(" ")[1],c=l.makeRandomMove(),h=o.receiveAttack(c);if(n.receiveAttack(a)){s(l.gameboard),setTimeout((function(){for(;!h;)c=l.makeRandomMove(),h=o.receiveAttack(c);d(r.gameboard)}),1e3);let e=o.allSunk(),a=n.allSunk();e&&(i(),function(){const e=document.getElementById("main"),a=document.createElement("div"),n=document.createElement("h3"),d=document.createElement("button");a.classList.add("pop-up-box"),n.classList.add("title-pop-up"),d.classList.add("play-button"),n.textContent="You Lose",d.innerHTML="Play Again",d.type="submit",a.appendChild(n),a.appendChild(d),e.appendChild(a),d.addEventListener("click",(()=>{i(),t()}))}()),a&&(i(),function(){const e=document.getElementById("main"),a=document.createElement("div"),n=document.createElement("h3"),d=document.createElement("button");a.classList.add("pop-up-box"),n.classList.add("title-pop-up"),d.classList.add("play-button"),n.textContent="You Win",d.innerHTML="Play Again",d.type="submit",a.appendChild(n),a.appendChild(d),e.appendChild(a),d.addEventListener("click",(()=>{i(),t()}))}())}}))}))}(n)}function d(e){let t=e.boardArray();for(let e=0;e<t.length;e++){if(t[e].hasShip&&(document.getElementById(t[e].coordinates).style.background="#15803d"),t[e].attacked){let a=document.getElementById(t[e].coordinates);a.innerHTML="❌",a.style.background="#F5C2C1"}if(t[e].missed){let a=document.getElementById(t[e].coordinates);a.innerHTML="💦",a.style.background="lightblue"}t[e].hasShip||t[e].attacked||t[e].missed||(document.getElementById(t[e].coordinates).style.background="#172554")}}function s(e){const t=document.querySelectorAll(".enemy-div-box");for(const a of t){let t=a.id.split(" ")[1];e.board[t].attacked&&(a.innerHTML="❌",a.style.background="#F5C2C1"),e.board[t].missed&&(a.innerHTML="💦",a.style.background="lightblue")}}function i(){document.getElementById("main").innerHTML=""}t()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,