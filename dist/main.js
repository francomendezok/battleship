(()=>{var e={776:e=>{class t{constructor(e){this.size=e,this.hit=0,this.sunk=!1,this.coordinates=[]}registerHit(){return this.hit+=1}isSunk(){return this.hit===this.size}addCoordinates(e){this.coordinates.push(e)}}class a{constructor(){this.board=[],this.ships=[]}createBoard(e=8){for(let t=0;t<e;t+=1)for(let a=0;a<e;a+=1){const e=`${t},${a}`;this.board[e]={coordinates:e,attacked:!1,missed:!1,hasShip:!1,ship:[]}}return this.board}isValid(e){let t=e.split(","),a=Number(t[0]),s=Number(t[1]);return a>=0&&a<=7&&s>=0&&s<=7}getBoard(){return this.board}addShip(e){this.ships.push(e)}placeShip(e,a){if(e!==a.length)return"Size and coordinates length should be equal";const s=new t(e);for(let e=0;e<a.length;e++)if(this.isValid(a[e]))this.board[a[e]].ship.push(a),this.board[a[e]].hasShip=!0;else if(!this.isValid(a[e]))return"No Valid";return s.addCoordinates(a),this.addShip(s),this.board}isMoveLegal(e){return!this.board[e].attacked&&!this.board[e].missed}placeEnemyShips(e){this.createCoordinates(5),this.createCoordinates(4),this.createCoordinates(3),this.createCoordinates(3),this.createCoordinates(2)}createCoordinates(e){let t=Math.floor(8*Math.random()),a=Math.floor(8*Math.random()),s=`${t},${a}`,i=[];if(this.isMoveLegal(s))i.push(s);else for(;!this.isMoveLegal(s);)t=Math.floor(8*Math.random()),a=Math.floor(8*Math.random()),s=`${t},${a}`;let d=s.split(",");i.push(s);for(let t=0;t<e-1;t++)d[Math.floor(2*Math.random())];return i}getAdjacents(e,t,a){let s=[[],[],[],[]],i=8,d=1,n=8,o=1,r=0;for(let t=0;t<e.length;t++)if(e[t].coordinates===a){r=t;break}for(let c=0;c<t;c++){if(e[r-i]){let t=a.split(","),d=e[r-i].coordinates;d.split(","),d&&d.includes(t[1])&&(s[0].push(e[r-i].coordinates),i+=8)}if(e[r+d]){let t=a.split(","),i=e[r+d].coordinates,n=i.split(",");i&&n[0]===t[0]&&(s[1].push(e[r+d].coordinates),d++)}if(e[r+n]){let t=a.split(","),i=e[r+n].coordinates;i.split(","),i&&i.includes(t[1])&&(s[2].push(e[r+n].coordinates),n+=8)}if(e[r-o]){let t=a.split(","),i=e[r-o].coordinates,d=i.split(",");i&&d[0]===t[0]&&(s[3].push(e[r-o].coordinates),o++)}}return s}receiveAttack(e){let t=`${e}`;if(!this.board[t].attacked&&!this.board[t].missed)return this.board[t].hasShip?(this.board[t].attacked=!0,this.ships.forEach((e=>{e.coordinates[0].includes(t)&&(e.registerHit(),e.isSunk()&&(e.sunk=!0))}))):this.board[t].missed=!0,!0}getShips(){return this.ships}allSunk(){return this.ships.every((e=>!0===e.sunk))}boardArray(){const e=this.board,t=[];for(let a in e)t.push(e[a]);return t}}let s=new a;s.createBoard(),s.placeShip(3,["7,1","7,2","7,3"]),s.placeShip(3,["0,1","0,2","0,3"]),s.receiveAttack("0,1"),s.receiveAttack("0,2"),s.receiveAttack("0,3"),s.receiveAttack("7,1"),s.receiveAttack("7,2"),s.receiveAttack("7,3");let i=s.boardArray();s.getAdjacents(i,4,"6,7");class d{constructor(e){this.gameboard=e}isMoveLegal(e){return!this.gameboard.board[e].attacked&&!this.gameboard.board[e].missed}makeRandomMove(){let e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;if(this.isMoveLegal(a))return a;for(;!this.isMoveLegal(a);)e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;return a}}new d(s),e.exports={Ship:t,Gameboard:a,Player:d}}},t={};function a(s){var i=t[s];if(void 0!==i)return i.exports;var d=t[s]={exports:{}};return e[s](d,d.exports,a),d.exports}(()=>{"use strict";var e=a(776);function t(){const a=document.getElementById("main"),r=document.createElement("div"),c=document.createElement("h3"),l=document.createElement("input"),m=document.createElement("button");r.classList.add("pop-up-box"),c.classList.add("title-pop-up"),l.classList.add("input-pop-up"),m.classList.add("play-button"),c.textContent="Write your Name",m.innerHTML="Battle",l.type="text",m.type="submit",r.appendChild(c),r.appendChild(l),r.appendChild(m),a.appendChild(r),m.addEventListener("click",(()=>{o(),function(a){let r=new e.Gameboard,c=new e.Gameboard;r.createBoard(),c.createBoard(),function(e){const t=document.getElementById("main"),a=document.createElement("div"),s=document.createElement("div"),i=document.createElement("div"),d=document.createElement("div"),n=document.createElement("h3"),o=document.createElement("div"),r=document.createElement("div"),c=document.createElement("div"),l=document.createElement("div"),m=document.createElement("div"),h=document.createElement("h3"),p=document.createElement("img"),u=document.createElement("img"),b=document.createElement("img"),g=document.createElement("img"),f=document.createElement("img");p.src="../dist/Images/5.png",u.src="../dist/Images/5.png",b.src="../dist/Images/5.png",g.src="../dist/Images/5.png",f.src="../dist/Images/5.png",[p,u,b,g,f].forEach((e=>{e.classList.add("ship"),o.appendChild(e)})),a.classList.add("my-section"),s.classList.add("my-game-section"),i.classList.add("my-board"),d.classList.add("my-name-box"),n.classList.add("my-name"),o.classList.add("my-ships"),r.classList.add("enemy-section"),c.classList.add("enemy-game-section"),l.classList.add("enemy-board"),m.classList.add("enemy-name-box"),h.classList.add("enemy-name");for(let e=0;e<8;e+=1)for(let t=0;t<8;t+=1){const a=`${e},${t}`,s=document.createElement("div"),d=document.createElement("div");s.classList.add("my-div-box"),d.classList.add("enemy-div-box"),s.id=`P ${a}`,d.id=`E ${a}`,i.appendChild(s),l.appendChild(d)}n.textContent=e,h.textContent="Enemy",d.appendChild(n),s.appendChild(i),a.appendChild(d),a.appendChild(s),m.appendChild(h),c.appendChild(l),r.appendChild(m),r.appendChild(c),t.appendChild(a),t.appendChild(o),t.appendChild(r),t.classList.add("main-game")}(a),function(e){let t=document.querySelectorAll(".ship"),a=[5,4,3,3,2];document.querySelectorAll(".my-div-box");for(let s=0;s<t.length;s++){let i=t[s].dataset.size=a[s];t[s].addEventListener("click",(()=>{d(e,i),n(t,t[s])})),0===s&&t[s].click()}}(r);let l=new e.Player(r),m=new e.Player(c);s(l.gameboard),i(m.gameboard),[...document.querySelectorAll(".enemy-div-box")].forEach((e=>{e.addEventListener("click",(e=>{let a=e.target.id.split(" ")[1],d=m.makeRandomMove(),n=r.receiveAttack(d);if(c.receiveAttack(a)){i(m.gameboard),setTimeout((function(){for(;!n;)d=m.makeRandomMove(),n=r.receiveAttack(d);s(l.gameboard)}),1e3);let e=r.allSunk(),a=c.allSunk();e&&(o(),function(){const e=document.getElementById("main"),a=document.createElement("div"),s=document.createElement("h3"),i=document.createElement("button");a.classList.add("pop-up-box"),s.classList.add("title-pop-up"),i.classList.add("play-button"),s.textContent="You Lose",i.innerHTML="Play Again",i.type="submit",a.appendChild(s),a.appendChild(i),e.appendChild(a),i.addEventListener("click",(()=>{o(),t()}))}()),a&&(o(),function(){const e=document.getElementById("main"),a=document.createElement("div"),s=document.createElement("h3"),i=document.createElement("button");a.classList.add("pop-up-box"),s.classList.add("title-pop-up"),i.classList.add("play-button"),s.textContent="You Win",i.innerHTML="Play Again",i.type="submit",a.appendChild(s),a.appendChild(i),e.appendChild(a),i.addEventListener("click",(()=>{o(),t()}))}())}}))}))}(l.value)}))}function s(e){const t=document.querySelectorAll(".my-div-box");for(const a of t){let t=a.id.split(" ")[1];e.board[t].hasShip&&(a.style.background="green"),e.board[t].attacked&&(a.innerHTML="❌",a.style.background="#F5C2C1"),e.board[t].missed&&(a.innerHTML="💦",a.style.background="lightblue")}}function i(e){const t=document.querySelectorAll(".enemy-div-box");for(const a of t){let t=a.id.split(" ")[1];e.board[t].hasShip&&(a.style.background="orange"),e.board[t].attacked&&(a.innerHTML="❌",a.style.background="#F5C2C1"),e.board[t].missed&&(a.innerHTML="💦",a.style.background="lightblue")}}function d(e,t){let a=document.querySelectorAll(".my-div-box"),s=e.boardArray();t?a.forEach((a=>{a.addEventListener("mouseover",(()=>{let i=a.id.split(","),d=`${i[0].split(" ")[1]},${i[1]}`;e.getAdjacents(s,t-1,d).forEach((e=>{for(let t=0;t<e.length;t++){let a=`P ${e[t]}`;document.getElementById(a).classList.add("over")}}))})),a.addEventListener("mouseout",(()=>{let i=a.id.split(","),d=`${i[0].split(" ")[1]},${i[1]}`;e.getAdjacents(s,t-1,d).forEach((e=>{e.forEach((e=>{let t=`P ${e}`;document.getElementById(t).classList.remove("over")}))}))}))})):alert("No size")}function n(e,t){e.forEach((e=>{e.classList.contains("ship-selected")&&e.classList.remove("ship-selected"),e===t&&e.classList.add("ship-selected")}))}function o(){document.getElementById("main").innerHTML=""}t()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,