(()=>{var e={776:e=>{class t{constructor(e){this.size=e,this.hit=0,this.sunk=!1,this.coordinates=[]}registerHit(){return this.hit+=1}isSunk(){return this.hit===this.size}addCoordinates(e){this.coordinates.push(e)}}class a{constructor(){this.board=[],this.ships=[]}createBoard(e=8){for(let t=0;t<e;t+=1)for(let a=0;a<e;a+=1){const e=`${t},${a}`;this.board[e]={attacked:!1,missed:!1,hasShip:!1,ship:[]}}return this.board}isValid(e){let t=e.split(","),a=Number(t[0]),i=Number(t[1]);return a>=0&&a<=7&&i>=0&&i<=7}getBoard(){return this.board}addShip(e){this.ships.push(e)}placeShip(e,a){if(e!==a.length)return"Size and coordinates length should be equal";const i=new t(e);for(let e=0;e<a.length;e++)if(this.isValid(a[e]))this.board[a[e]].ship.push(a),this.board[a[e]].hasShip=!0;else if(!this.isValid(a[e]))return"No Valid";return i.addCoordinates(a),this.addShip(i),this.board}receiveAttack(e){let t=`${e}`;this.board[t].hasShip?(this.board[t].attacked=!0,this.ships.forEach((e=>{e.coordinates[0].includes(t)&&(e.registerHit(),e.isSunk()&&(e.sunk=!0))}))):this.board[t].missed=!0}getShips(){return this.ships}allSunk(){return this.ships.every((e=>!0===e.sunk))}}let i=new a;i.createBoard(),i.placeShip(3,["7,1","7,2","7,3"]),i.placeShip(3,["0,1","0,2","0,3"]),i.receiveAttack("0,1"),i.receiveAttack("0,2"),i.receiveAttack("0,3"),i.receiveAttack("7,1"),i.receiveAttack("7,2"),i.receiveAttack("7,3");class s{constructor(e){this.gameboard=e}isMoveLegal(e){return!this.gameboard.board[e].attacked&&!this.gameboard.board[e].missed}makeRandomMove(){let e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;if(this.isMoveLegal(a))return a;for(;!this.isMoveLegal(a);)e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;return a}}new s(i),e.exports={Ship:t,Gameboard:a,Player:s}}},t={};function a(i){var s=t[i];if(void 0!==s)return s.exports;var d=t[i]={exports:{}};return e[i](d,d.exports,a),d.exports}(()=>{"use strict";var e=a(776);function t(e){const t=document.querySelectorAll(".my-div-box");for(const a of t){let t=a.id.split(" ")[1];e.board[t].hasShip&&(a.style.background="green"),e.board[t].attacked&&(a.style.background="red"),e.board[t].missed&&(a.style.background="white")}}(function(){const e=document.getElementById("main"),t=document.createElement("div"),a=document.createElement("div"),i=document.createElement("div"),s=document.createElement("div"),d=document.createElement("div"),r=document.createElement("h3"),n=document.createElement("div"),c=document.createElement("div"),o=document.createElement("div"),l=document.createElement("div"),m=document.createElement("div"),h=document.createElement("h3"),p=document.createElement("img"),u=document.createElement("img"),g=document.createElement("img"),b=document.createElement("img"),v=document.createElement("img");p.src="../dist/Images/5.png",u.src="../dist/Images/5.png",g.src="../dist/Images/5.png",b.src="../dist/Images/5.png",v.src="../dist/Images/5.png";const y=document.createElement("img"),E=document.createElement("img"),k=document.createElement("img"),S=document.createElement("img"),f=document.createElement("img");y.src="../dist/Images/5.png",E.src="../dist/Images/5.png",k.src="../dist/Images/5.png",S.src="../dist/Images/5.png",f.src="../dist/Images/5.png";const L=[y,E,k,S,f];[p,u,g,b,v].forEach((e=>{e.classList.add("ship"),s.appendChild(e)})),L.forEach((e=>{e.classList.add("ship"),l.appendChild(e)})),t.classList.add("my-section"),a.classList.add("my-game-section"),i.classList.add("my-board"),s.classList.add("my-ships"),d.classList.add("my-name-box"),r.classList.add("my-name"),n.classList.add("enemy-section"),c.classList.add("enemy-game-section"),o.classList.add("enemy-board"),l.classList.add("enemy-ships"),m.classList.add("enemy-name-box"),h.classList.add("enemy-name");for(let e=0;e<8;e+=1)for(let t=0;t<8;t+=1){const a=`${e},${t}`,s=document.createElement("div"),d=document.createElement("div");s.classList.add("my-div-box"),d.classList.add("enemy-div-box"),s.id=`P ${a}`,d.id=`E ${a}`,i.appendChild(s),o.appendChild(d)}r.textContent="Franco",h.textContent="Enemy",d.appendChild(r),a.appendChild(i),a.appendChild(s),t.appendChild(d),t.appendChild(a),m.appendChild(h),c.appendChild(o),c.appendChild(l),n.appendChild(m),n.appendChild(c),e.appendChild(t),e.appendChild(n),e.classList.add("main-game")})(),function(){let a=new e.Gameboard,i=new e.Gameboard;a.createBoard(),a.placeShip(5,["1,1","1,2","1,3","1,4","1,5"]),a.placeShip(4,["4,4","4,5","4,6","4,7"]),a.placeShip(3,["7,1","7,2","7,3"]),a.placeShip(3,["0,1","0,2","0,3"]),a.placeShip(2,["5,1","5,2"]),i.createBoard(),i.placeShip(5,["1,1","1,2","1,3","1,4","1,5"]),i.placeShip(4,["4,4","4,5","4,6","4,7"]),i.placeShip(3,["7,1","7,2","7,3"]),i.placeShip(3,["0,1","0,2","0,3"]),i.placeShip(2,["5,1","5,2"]);let s=new e.Player(a),d=new e.Player(i);a.receiveAttack("0,1"),a.receiveAttack("0,0"),i.receiveAttack("4,4"),t(s.gameboard),function(e){const t=document.querySelectorAll(".enemy-div-box");for(const a of t){let t=a.id.split(" ")[1];e.board[t].hasShip&&(a.style.background="orange"),e.board[t].attacked&&(a.style.background="red"),e.board[t].missed&&(a.style.background="white")}}(d.gameboard),[...document.querySelectorAll(".my-div-box")].forEach((e=>{e.addEventListener("click",(e=>{let i=e.target.id.split(" ")[1];a.receiveAttack(i),t(s.gameboard)}))})),[...document.querySelectorAll(".enemy-div-box")].forEach((e=>{e.addEventListener("click",(e=>{let a=e.target.id.split(" ")[1];i.receiveAttack(a),t(d.gameboard)}))}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,