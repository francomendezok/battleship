(()=>{var e={776:e=>{class t{constructor(e){this.size=e,this.hit=0,this.sunk=!1,this.coordinates=[]}registerHit(){return this.hit+=1}isSunk(){return this.hit===this.size}addCoordinates(e){this.coordinates.push(e)}}class a{constructor(){this.board=[],this.ships=[]}createBoard(e=8){for(let t=0;t<e;t+=1)for(let a=0;a<e;a+=1){const e=`${t},${a}`;this.board[e]={coordinates:e,attacked:!1,missed:!1,hasShip:!1,ship:[]}}return this.board}isValid(e){let t=e.split(","),a=Number(t[0]),s=Number(t[1]);return a>=0&&a<=7&&s>=0&&s<=7}getBoard(){return this.board}addShip(e){this.ships.push(e)}placeShip(e,a){if(e!==a.length)return"Size and coordinates length should be equal";const s=new t(e);for(let e=0;e<a.length;e++){if(!this.isValid(a[e]))return`There is a Ship in ${a[e]}`;this.board[a[e]].ship.push(a),this.board[a[e]].hasShip=!0}return s.addCoordinates(a),this.addShip(s),this.board}isMoveLegal(e){return!this.board[e].attacked&&!this.board[e].missed}hasShip(e){return this.board[e].hasShip}placeEnemyShips(){let e=this.createCoordinates(),t=this.createCoordinates(),a=this.createCoordinates(),s=this.createCoordinates(),i=this.createCoordinates(),r=this.boardArray(),d=[this.getAdjacents(r,5,e),this.getAdjacents(r,4,t),this.getAdjacents(r,3,a),this.getAdjacents(r,3,s),this.getAdjacents(r,2,i)],o=[5,4,3,3,2],n=[];for(let e=0;e<d.length;e++){let t=d[e].filter((t=>t.length===o[e]));n.push(t)}n.forEach((e=>{this.placeShip(e[0].length,e[0])}))}createCoordinates(){let e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;if(this.hasShip(a)){for(;this.hasShip(a);)e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;return a}return a}getAdjacents(e,t,a){let s=[[],[],[],[]],i=8,r=1,d=8,o=1,n=0;for(let t=0;t<e.length;t++)if(e[t].coordinates===a){n=t;break}for(let l=0;l<t;l++){if(e[n-i]){let t=a.split(","),r=e[n-i].coordinates;r.split(","),r&&r.includes(t[1])&&(s[0].push(e[n-i].coordinates),i+=8)}if(e[n+r]){let t=a.split(","),i=e[n+r].coordinates,d=i.split(",");i&&d[0]===t[0]&&(s[1].push(e[n+r].coordinates),r++)}if(e[n+d]){let t=a.split(","),i=e[n+d].coordinates;i.split(","),i&&i.includes(t[1])&&(s[2].push(e[n+d].coordinates),d+=8)}if(e[n-o]){let t=a.split(","),i=e[n-o].coordinates,r=i.split(",");i&&r[0]===t[0]&&(s[3].push(e[n-o].coordinates),o++)}}return s}receiveAttack(e){let t=`${e}`;if(!this.board[t].attacked&&!this.board[t].missed)return this.board[t].hasShip?(this.board[t].attacked=!0,this.ships.forEach((e=>{e.coordinates[0].includes(t)&&(e.registerHit(),e.isSunk()&&(e.sunk=!0))}))):this.board[t].missed=!0,!0}getShips(){return this.ships}allSunk(){return this.ships.every((e=>!0===e.sunk))}boardArray(){const e=this.board,t=[];for(let a in e)t.push(e[a]);return t}}let s=new a;s.createBoard();let i=s.placeEnemyShips();console.log(i),e.exports={Ship:t,Gameboard:a,Player:class{constructor(e){this.gameboard=e}isMoveLegal(e){return!this.gameboard.board[e].attacked&&!this.gameboard.board[e].missed}makeRandomMove(){let e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;if(this.isMoveLegal(a))return a;for(;!this.isMoveLegal(a);)e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;return a}}}}},t={};function a(s){var i=t[s];if(void 0!==i)return i.exports;var r=t[s]={exports:{}};return e[s](r,r.exports,a),r.exports}(()=>{"use strict";var e=a(776);function t(e){const t=document.querySelectorAll(".my-div-box");for(const a of t){let t=a.id.split(" ")[1];e.board[t].hasShip&&(a.style.background="green"),e.board[t].attacked&&(a.innerHTML="❌",a.style.background="#F5C2C1"),e.board[t].missed&&(a.innerHTML="💦",a.style.background="lightblue")}}function s(e){const t=document.querySelectorAll(".enemy-div-box");for(const a of t){let t=a.id.split(" ")[1];e.board[t].hasShip&&(a.style.background="orange"),e.board[t].attacked&&(a.innerHTML="❌",a.style.background="#F5C2C1"),e.board[t].missed&&(a.innerHTML="💦",a.style.background="lightblue"),e.board[t].hasShip&&(a.innerHTML="🚢",a.style.background="lightblue")}}function i(e,t){let a=document.querySelectorAll(".my-div-box"),s=e.boardArray();t?a.forEach((a=>{a.addEventListener("mouseover",(()=>{let i=a.id.split(","),r=`${i[0].split(" ")[1]},${i[1]}`;e.getAdjacents(s,t-1,r).forEach((e=>{for(let t=0;t<e.length;t++){let a=`P ${e[t]}`;document.getElementById(a).classList.add("over")}}))})),a.addEventListener("mouseout",(()=>{let i=a.id.split(","),r=`${i[0].split(" ")[1]},${i[1]}`;e.getAdjacents(s,t-1,r).forEach((e=>{e.forEach((e=>{let t=`P ${e}`;document.getElementById(t).classList.remove("over")}))}))}))})):alert("No size")}function r(e,t){e.forEach((e=>{e.classList.contains("ship-selected")&&e.classList.remove("ship-selected"),e===t&&e.classList.add("ship-selected")}))}!function(a){let d=new e.Gameboard,o=new e.Gameboard;d.createBoard(),o.createBoard(),function(e){const t=document.getElementById("main"),a=document.createElement("div"),s=document.createElement("div"),i=document.createElement("div"),r=document.createElement("div"),d=document.createElement("h3"),o=document.createElement("div"),n=document.createElement("div"),l=document.createElement("div"),c=document.createElement("div"),h=document.createElement("div"),m=document.createElement("h3"),u=document.createElement("img"),p=document.createElement("img"),g=document.createElement("img"),b=document.createElement("img"),f=document.createElement("img");u.src="../dist/Images/5.png",p.src="../dist/Images/5.png",g.src="../dist/Images/5.png",b.src="../dist/Images/5.png",f.src="../dist/Images/5.png",[u,p,g,b,f].forEach((e=>{e.classList.add("ship"),o.appendChild(e)})),a.classList.add("my-section"),s.classList.add("my-game-section"),i.classList.add("my-board"),r.classList.add("my-name-box"),d.classList.add("my-name"),o.classList.add("my-ships"),n.classList.add("enemy-section"),l.classList.add("enemy-game-section"),c.classList.add("enemy-board"),h.classList.add("enemy-name-box"),m.classList.add("enemy-name");for(let e=0;e<8;e+=1)for(let t=0;t<8;t+=1){const a=`${e},${t}`,s=document.createElement("div"),r=document.createElement("div");s.classList.add("my-div-box"),r.classList.add("enemy-div-box"),s.id=`P ${a}`,r.id=`E ${a}`,i.appendChild(s),c.appendChild(r)}d.textContent=undefined,m.textContent="Enemy",r.appendChild(d),s.appendChild(i),a.appendChild(r),a.appendChild(s),h.appendChild(m),l.appendChild(c),n.appendChild(h),n.appendChild(l),t.appendChild(a),t.appendChild(o),t.appendChild(n),t.classList.add("main-game")}(),function(e){let t=document.querySelectorAll(".ship"),a=[5,4,3,3,2];document.querySelectorAll(".my-div-box");for(let s=0;s<t.length;s++){let d=t[s].dataset.size=a[s];t[s].addEventListener("click",(()=>{i(e,d),r(t,t[s])})),0===s&&t[s].click()}}(d);let n=new e.Player(d),l=new e.Player(o);o.receiveAttack("0,4"),o.placeEnemyShips(),t(n.gameboard),s(l.gameboard),[...document.querySelectorAll(".enemy-div-box")].forEach((e=>{e.addEventListener("click",(e=>{let a=e.target.id.split(" ")[1],i=l.makeRandomMove(),r=d.receiveAttack(i);o.receiveAttack(a)&&(s(l.gameboard),setTimeout((function(){for(;!r;)i=l.makeRandomMove(),r=d.receiveAttack(i);t(n.gameboard)}),1e3),d.allSunk(),o.allSunk())}))}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,