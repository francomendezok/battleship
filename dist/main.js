(()=>{var e={776:e=>{class t{constructor(e){this.size=e,this.hit=0,this.sunk=!1,this.coordinates=[]}registerHit(){return this.hit+=1}isSunk(){return this.hit===this.size}addCoordinates(e){this.coordinates.push(e)}}e.exports={Ship:t,Gameboard:class{constructor(){this.board=[],this.ships=[]}createBoard(e=8){for(let t=0;t<e;t+=1)for(let a=0;a<e;a+=1){const e=`${t},${a}`;this.board[e]={coordinates:e,attacked:!1,missed:!1,hasShip:!1,ship:[]}}return this.board}isValid(e){let t=e.split(","),a=Number(t[0]),n=Number(t[1]);return a>=0&&a<=7&&n>=0&&n<=7}getBoard(){return this.board}addShip(e){this.ships.push(e)}placeShip(e,a){if(e!==a.length)return!1;const n=new t(e);for(let e=0;e<a.length;e++){if(this.hasShip(a[e]))return!1;this.board[a[e]].ship.push(a),this.board[a[e]].hasShip=!0}return n.addCoordinates(a),this.addShip(n),!0}isMoveLegal(e){return!this.board[e].attacked&&!this.board[e].missed}hasShip(e){return this.board[e].hasShip}placeEnemyShips(e){let t=this.createCoordinates(),a=this.createCoordinates(),n=this.createCoordinates(),d=this.createCoordinates(),s=this.createCoordinates(),o=[e.getAdjacents(e,5,t),e.getAdjacents(e,4,a),e.getAdjacents(e,3,n),e.getAdjacents(e,3,d),e.getAdjacents(e,2,s)],r=[5,4,3,3,2],i=[];for(let e=0;e<o.length;e++){let t=o[e].filter((t=>t.length===r[e]));i.push(t)}i.forEach((e=>{this.placeShip(e[0].length,e[0])}))}createCoordinates(){let e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;if(this.hasShip(a)){for(;this.hasShip(a);)e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;return a}return a}getAdjacents(e,t,a){let n=e.boardArray(),d=[[],[]],s=1,o=8,r=0;for(let e=0;e<n.length;e++)if(n[e].coordinates===a){r=e;break}for(let e=0;e<t;e++){if(n[r+s]){let e=a.split(","),t=n[r+s].coordinates,o=t.split(",");t&&o[0]===e[0]&&(d[0].push(n[r+s].coordinates),s++)}if(n[r+o]){let e=a.split(","),t=n[r+o].coordinates;t.split(","),t&&t.includes(e[1])&&(d[1].push(n[r+o].coordinates),o+=8)}}return d}hasAllShipsPlaced(){return 5===this.ships.length}receiveAttack(e){let t=`${e}`;if(!this.board[t].attacked&&!this.board[t].missed)return this.board[t].hasShip?(this.board[t].attacked=!0,this.ships.forEach((e=>{e.coordinates[0].includes(t)&&(e.registerHit(),e.isSunk()&&(e.sunk=!0))}))):this.board[t].missed=!0,!0}getShips(){return this.ships}allSunk(){return this.ships.every((e=>!0===e.sunk))}boardArray(){const e=this.board,t=[];for(let a in e)t.push(e[a]);return t}},Player:class{constructor(e){this.gameboard=e}isMoveLegal(e){return!this.gameboard.board[e].attacked&&!this.gameboard.board[e].missed}makeRandomMove(){let e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;if(this.isMoveLegal(a))return a;for(;!this.isMoveLegal(a);)e=Math.floor(8*Math.random()),t=Math.floor(8*Math.random()),a=`${e},${t}`;return a}}}}},t={};function a(n){var d=t[n];if(void 0!==d)return d.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,a),s.exports}(()=>{"use strict";var e=a(776);function t(t,a){const s=document.getElementById("main"),o=document.createElement("div"),r=document.createElement("div"),i=document.createElement("div"),l=document.createElement("div"),c=document.createElement("h3"),h=document.createElement("div"),u=document.createElement("div"),m=document.createElement("div"),p=document.createElement("div"),y=document.createElement("h3");o.classList.add("my-section"),r.classList.add("my-game-section"),i.classList.add("my-board"),l.classList.add("my-name-box"),c.classList.add("my-name"),h.classList.add("enemy-section"),u.classList.add("enemy-game-section"),m.classList.add("enemy-board"),p.classList.add("enemy-name-box"),y.classList.add("enemy-name");for(let e=0;e<8;e+=1)for(let t=0;t<8;t+=1){const a=`${e},${t}`,n=document.createElement("div"),d=document.createElement("div");n.classList.add("my-div-box"),d.classList.add("enemy-div-box"),n.id=`${a}`,d.id=`E ${a}`,i.appendChild(n),m.appendChild(d)}c.innerHTML=t,y.innerHTML="Enemy",l.appendChild(c),r.appendChild(i),o.appendChild(l),o.appendChild(r),p.appendChild(y),u.appendChild(m),h.appendChild(p),h.appendChild(u),s.appendChild(o),s.appendChild(h),s.classList.add("main-game"),n(a),function(t){let a=new e.Gameboard,s=t,o=new e.Player(s);a.createBoard();let r=new e.Player(a);n(t),d(a),[...document.querySelectorAll(".enemy-div-box")].forEach((e=>{e.addEventListener("click",(e=>{let t=e.target.id.split(" ")[1],i=r.makeRandomMove(),l=s.receiveAttack(i);a.receiveAttack(t)&&(d(r.gameboard),setTimeout((function(){for(;!l;)i=r.makeRandomMove(),l=s.receiveAttack(i);n(o.gameboard)}),1e3))}))}))}(a)}function n(e){let t=e.boardArray();for(let e=0;e<t.length;e++){if(t[e].hasShip&&(document.getElementById(t[e].coordinates).style.background="green"),t[e].attacked){let a=document.getElementById(t[e].coordinates);a.innerHTML="❌",a.style.background="#F5C2C1"}if(t[e].missed){let a=document.getElementById(t[e].coordinates);a.innerHTML="💦",a.style.background="lightblue"}t[e].hasShip||t[e].attacked||t[e].missed||(document.getElementById(t[e].coordinates).style.background="lightgoldenrodyellow")}}function d(e){const t=document.querySelectorAll(".enemy-div-box");for(const a of t){let t=a.id.split(" ")[1];e.board[t].attacked&&(a.innerHTML="❌",a.style.background="#F5C2C1"),e.board[t].missed&&(a.innerHTML="💦",a.style.background="lightblue"),e.board[t].hasShip&&(a.innerHTML="🚢",a.style.background="lightblue")}}function s(){document.getElementById("main").innerHTML=""}!function(){const a=document.getElementById("main"),d=document.createElement("div"),o=document.createElement("h3"),r=document.createElement("input"),i=document.createElement("button");d.classList.add("pop-up-box"),o.classList.add("title-pop-up"),r.classList.add("input-pop-up"),i.classList.add("play-button"),o.textContent="Write your Name",i.innerHTML="Battle",r.type="text",i.type="submit",d.appendChild(o),d.appendChild(r),d.appendChild(i),a.appendChild(d),i.addEventListener("click",(()=>{r.value?(s(),function(a){const d=document.getElementById("main"),o=document.createElement("div"),r=document.createElement("div"),i=document.createElement("div"),l=document.createElement("div"),c=document.createElement("h3"),h=document.createElement("button"),u=["Carrier","Battleship","Cruiser","Submarine","Destroyer"];let m=[4,3,2,2,1];d.classList.add("main-game"),o.classList.add("my-section"),r.classList.add("my-game-section"),i.classList.add("my-board"),l.classList.add("my-name-box"),c.classList.add("my-name"),h.classList.add("axis");let p=0;c.innerHTML=`${a},  place your  ${u[p]}`,c.dataset.size=p,h.innerHTML="Axis X",h.addEventListener("click",(()=>{"Axis X"===h.innerHTML?h.innerHTML="Axis Y":h.innerHTML="Axis X"}));let y=new e.Gameboard;y.createBoard(),new e.Player(y);for(let e=0;e<8;e+=1)for(let a=0;a<8;a+=1){const d=`${e},${a}`,o=document.createElement("div");o.classList.add("my-div-box"),o.id=`${d}`,7===a&&(o.dataset.xNotAllowed=!0),7===e&&(o.dataset.yNotAllowed=!0),o.addEventListener("mouseover",(()=>{let e=document.querySelector(".my-name").textContent.split(" "),t=e[e.length-1],a=u.indexOf(t),n=m[a],d=document.querySelector(".axis").textContent.split(" ")[1],s=y.getAdjacents(y,n,o.id);if("X"===d){let e=s[0].some((e=>y.hasShip(e)));y.hasShip(o.id)||e||s[0].length<n?(y.hasShip(o.id)||(o.style.background="red"),o.style.cursor="not-allowed"):s[0].forEach((e=>{y.hasShip(e)?(o.style.cursor="not-allowed",document.getElementById(e).style.background="green"):(document.getElementById(e).style.background="black",o.style.background="black",o.style.cursor="crosshair")}))}if("Y"===d){let e=s[1].some((e=>y.hasShip(e)));y.hasShip(o.id)||e||s[1].length<n?(y.hasShip(o.id)||(o.style.background="red"),o.style.cursor="not-allowed"):s[1].forEach((e=>{y.hasShip(e)?(o.style.cursor="not-allowed",document.getElementById(e).style.background="green"):(document.getElementById(e).style.background="black",o.style.background="black",o.style.cursor="crosshair")}))}})),o.addEventListener("mouseleave",(()=>{let e=document.querySelector(".my-name").textContent.split(" "),t=e[e.length-1],a=u.indexOf(t),n=m[a],d=document.querySelector(".axis").textContent.split(" ")[1],s=y.getAdjacents(y,n,o.id);"X"===d&&(o.dataset.xNotAllowed&&(o.style.background="lightgoldenrodyellow",o.style.cursor="crosshair"),y.hasShip(o.id)?(o.style.background="green",o.style.cursor="not-allowed"):s[0].forEach((e=>{y.hasShip(e)?(o.style.cursor="not-allowed",o.style.background="lightgoldenrodyellow",document.getElementById(e).style.background="green"):(document.getElementById(e).style.background="lightgoldenrodyellow",o.style.background="lightgoldenrodyellow")}))),"Y"===d&&(o.dataset.yNotAllowed&&(o.style.background="lightgoldenrodyellow",o.style.cursor="crosshair"),y.hasShip(o.id)?(o.style.background="green",o.style.cursor="not-allowed"):s[1].forEach((e=>{y.hasShip(e)?(o.style.cursor="not-allowed",o.style.background="lightgoldenrodyellow",document.getElementById(e).style.background="green"):(document.getElementById(e).style.background="lightgoldenrodyellow",o.style.background="lightgoldenrodyellow")})))})),o.addEventListener("click",(()=>{let e=document.querySelector(".my-name").textContent.split(" "),a=e[e.length-1],d=e[0].split(",")[0],r=u.indexOf(a),i=m[r],l=document.querySelector(".axis").textContent.split(" ")[1],h=y.getAdjacents(y,i,o.id);"X"===l&&(i+=1,h[0].unshift(o.id),y.placeShip(i,h[0])&&(n(y),p+=1,p===u.length&&(s(),t(d,y)),c.innerHTML=`${d},  place your ${u[p]}`)),"Y"===l&&(i+=1,h[1].unshift(o.id),y.placeShip(i,h[1])&&(n(y),p+=1,p===u.length&&(s(),t(d,y)),c.innerHTML=`${d},  place your ${u[p]}`))})),i.appendChild(o)}l.appendChild(c),l.appendChild(h),r.appendChild(i),o.appendChild(l),o.appendChild(r),d.appendChild(o),n(y)}(r.value)):alert("Please Write Your Name")}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,